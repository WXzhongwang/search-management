// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: admin/meta.proto

#ifndef PROTOBUF_admin_2fmeta_2eproto__INCLUDED
#define PROTOBUF_admin_2fmeta_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
class ClusterInfo;
class ClusterInfoDefaultTypeInternal;
extern ClusterInfoDefaultTypeInternal _ClusterInfo_default_instance_;
class CreateClusterReply;
class CreateClusterReplyDefaultTypeInternal;
extern CreateClusterReplyDefaultTypeInternal _CreateClusterReply_default_instance_;
class CreateClusterRequest;
class CreateClusterRequestDefaultTypeInternal;
extern CreateClusterRequestDefaultTypeInternal _CreateClusterRequest_default_instance_;
class CreateIndexReply;
class CreateIndexReplyDefaultTypeInternal;
extern CreateIndexReplyDefaultTypeInternal _CreateIndexReply_default_instance_;
class CreateIndexRequest;
class CreateIndexRequestDefaultTypeInternal;
extern CreateIndexRequestDefaultTypeInternal _CreateIndexRequest_default_instance_;
class CreateProjectReply;
class CreateProjectReplyDefaultTypeInternal;
extern CreateProjectReplyDefaultTypeInternal _CreateProjectReply_default_instance_;
class CreateProjectRequest;
class CreateProjectRequestDefaultTypeInternal;
extern CreateProjectRequestDefaultTypeInternal _CreateProjectRequest_default_instance_;
class DeleteClusterReply;
class DeleteClusterReplyDefaultTypeInternal;
extern DeleteClusterReplyDefaultTypeInternal _DeleteClusterReply_default_instance_;
class DeleteClusterRequest;
class DeleteClusterRequestDefaultTypeInternal;
extern DeleteClusterRequestDefaultTypeInternal _DeleteClusterRequest_default_instance_;
class DeleteIndexReply;
class DeleteIndexReplyDefaultTypeInternal;
extern DeleteIndexReplyDefaultTypeInternal _DeleteIndexReply_default_instance_;
class DeleteIndexRequest;
class DeleteIndexRequestDefaultTypeInternal;
extern DeleteIndexRequestDefaultTypeInternal _DeleteIndexRequest_default_instance_;
class DeleteProjectReply;
class DeleteProjectReplyDefaultTypeInternal;
extern DeleteProjectReplyDefaultTypeInternal _DeleteProjectReply_default_instance_;
class DeleteProjectRequest;
class DeleteProjectRequestDefaultTypeInternal;
extern DeleteProjectRequestDefaultTypeInternal _DeleteProjectRequest_default_instance_;
class GetClusterInfoReply;
class GetClusterInfoReplyDefaultTypeInternal;
extern GetClusterInfoReplyDefaultTypeInternal _GetClusterInfoReply_default_instance_;
class GetClusterInfoRequest;
class GetClusterInfoRequestDefaultTypeInternal;
extern GetClusterInfoRequestDefaultTypeInternal _GetClusterInfoRequest_default_instance_;
class GetIndexReply;
class GetIndexReplyDefaultTypeInternal;
extern GetIndexReplyDefaultTypeInternal _GetIndexReply_default_instance_;
class GetIndexRequest;
class GetIndexRequestDefaultTypeInternal;
extern GetIndexRequestDefaultTypeInternal _GetIndexRequest_default_instance_;
class GetProjectReply;
class GetProjectReplyDefaultTypeInternal;
extern GetProjectReplyDefaultTypeInternal _GetProjectReply_default_instance_;
class GetProjectRequest;
class GetProjectRequestDefaultTypeInternal;
extern GetProjectRequestDefaultTypeInternal _GetProjectRequest_default_instance_;
class IndexInfo;
class IndexInfoDefaultTypeInternal;
extern IndexInfoDefaultTypeInternal _IndexInfo_default_instance_;
class ListClusterDetailsReply;
class ListClusterDetailsReplyDefaultTypeInternal;
extern ListClusterDetailsReplyDefaultTypeInternal _ListClusterDetailsReply_default_instance_;
class ListClusterDetailsRequest;
class ListClusterDetailsRequestDefaultTypeInternal;
extern ListClusterDetailsRequestDefaultTypeInternal _ListClusterDetailsRequest_default_instance_;
class ListClusterReply;
class ListClusterReplyDefaultTypeInternal;
extern ListClusterReplyDefaultTypeInternal _ListClusterReply_default_instance_;
class ListClusterRequest;
class ListClusterRequestDefaultTypeInternal;
extern ListClusterRequestDefaultTypeInternal _ListClusterRequest_default_instance_;
class ListIndexReply;
class ListIndexReplyDefaultTypeInternal;
extern ListIndexReplyDefaultTypeInternal _ListIndexReply_default_instance_;
class ListIndexRequest;
class ListIndexRequestDefaultTypeInternal;
extern ListIndexRequestDefaultTypeInternal _ListIndexRequest_default_instance_;
class ListProjectDetailsReply;
class ListProjectDetailsReplyDefaultTypeInternal;
extern ListProjectDetailsReplyDefaultTypeInternal _ListProjectDetailsReply_default_instance_;
class ListProjectDetailsRequest;
class ListProjectDetailsRequestDefaultTypeInternal;
extern ListProjectDetailsRequestDefaultTypeInternal _ListProjectDetailsRequest_default_instance_;
class ListProjectReply;
class ListProjectReplyDefaultTypeInternal;
extern ListProjectReplyDefaultTypeInternal _ListProjectReply_default_instance_;
class ListProjectRequest;
class ListProjectRequestDefaultTypeInternal;
extern ListProjectRequestDefaultTypeInternal _ListProjectRequest_default_instance_;
class NodeInfo;
class NodeInfoDefaultTypeInternal;
extern NodeInfoDefaultTypeInternal _NodeInfo_default_instance_;
class ProjectInfo;
class ProjectInfoDefaultTypeInternal;
extern ProjectInfoDefaultTypeInternal _ProjectInfo_default_instance_;
class UpdateClusterInfoReply;
class UpdateClusterInfoReplyDefaultTypeInternal;
extern UpdateClusterInfoReplyDefaultTypeInternal _UpdateClusterInfoReply_default_instance_;
class UpdateClusterInfoRequest;
class UpdateClusterInfoRequestDefaultTypeInternal;
extern UpdateClusterInfoRequestDefaultTypeInternal _UpdateClusterInfoRequest_default_instance_;
class UpdateIndexReply;
class UpdateIndexReplyDefaultTypeInternal;
extern UpdateIndexReplyDefaultTypeInternal _UpdateIndexReply_default_instance_;
class UpdateIndexRequest;
class UpdateIndexRequestDefaultTypeInternal;
extern UpdateIndexRequestDefaultTypeInternal _UpdateIndexRequest_default_instance_;
class UpdateProjectReply;
class UpdateProjectReplyDefaultTypeInternal;
extern UpdateProjectReplyDefaultTypeInternal _UpdateProjectReply_default_instance_;
class UpdateProjectRequest;
class UpdateProjectRequestDefaultTypeInternal;
extern UpdateProjectRequestDefaultTypeInternal _UpdateProjectRequest_default_instance_;

namespace protobuf_admin_2fmeta_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_admin_2fmeta_2eproto

enum ClusterType {
  HDD = 0,
  SSD = 1,
  ClusterType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ClusterType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ClusterType_IsValid(int value);
const ClusterType ClusterType_MIN = HDD;
const ClusterType ClusterType_MAX = SSD;
const int ClusterType_ARRAYSIZE = ClusterType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClusterType_descriptor();
inline const ::std::string& ClusterType_Name(ClusterType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClusterType_descriptor(), value);
}
inline bool ClusterType_Parse(
    const ::std::string& name, ClusterType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClusterType>(
    ClusterType_descriptor(), name, value);
}
enum ClusterStatus {
  NULL_ = 0,
  CREATING = 1,
  IN_SERVICE = 2,
  DISABLED = 3,
  DELETING = 4,
  ClusterStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ClusterStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ClusterStatus_IsValid(int value);
const ClusterStatus ClusterStatus_MIN = NULL_;
const ClusterStatus ClusterStatus_MAX = DELETING;
const int ClusterStatus_ARRAYSIZE = ClusterStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClusterStatus_descriptor();
inline const ::std::string& ClusterStatus_Name(ClusterStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClusterStatus_descriptor(), value);
}
inline bool ClusterStatus_Parse(
    const ::std::string& name, ClusterStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClusterStatus>(
    ClusterStatus_descriptor(), name, value);
}
enum ProjectStatus {
  NORMAL = 0,
  DELETE = 1,
  ProjectStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ProjectStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ProjectStatus_IsValid(int value);
const ProjectStatus ProjectStatus_MIN = NORMAL;
const ProjectStatus ProjectStatus_MAX = DELETE;
const int ProjectStatus_ARRAYSIZE = ProjectStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProjectStatus_descriptor();
inline const ::std::string& ProjectStatus_Name(ProjectStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProjectStatus_descriptor(), value);
}
inline bool ProjectStatus_Parse(
    const ::std::string& name, ProjectStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProjectStatus>(
    ProjectStatus_descriptor(), name, value);
}
enum AutoIndexRollingPolicy {
  NONE = 0,
  DAY = 1,
  MONTH = 2,
  QUARTER = 3,
  HALF_YEAR = 4,
  YEAR = 5,
  AutoIndexRollingPolicy_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AutoIndexRollingPolicy_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AutoIndexRollingPolicy_IsValid(int value);
const AutoIndexRollingPolicy AutoIndexRollingPolicy_MIN = NONE;
const AutoIndexRollingPolicy AutoIndexRollingPolicy_MAX = YEAR;
const int AutoIndexRollingPolicy_ARRAYSIZE = AutoIndexRollingPolicy_MAX + 1;

const ::google::protobuf::EnumDescriptor* AutoIndexRollingPolicy_descriptor();
inline const ::std::string& AutoIndexRollingPolicy_Name(AutoIndexRollingPolicy value) {
  return ::google::protobuf::internal::NameOfEnum(
    AutoIndexRollingPolicy_descriptor(), value);
}
inline bool AutoIndexRollingPolicy_Parse(
    const ::std::string& name, AutoIndexRollingPolicy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AutoIndexRollingPolicy>(
    AutoIndexRollingPolicy_descriptor(), name, value);
}
// ===================================================================

class CreateClusterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CreateClusterRequest) */ {
 public:
  CreateClusterRequest();
  virtual ~CreateClusterRequest();

  CreateClusterRequest(const CreateClusterRequest& from);

  inline CreateClusterRequest& operator=(const CreateClusterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateClusterRequest(CreateClusterRequest&& from) noexcept
    : CreateClusterRequest() {
    *this = ::std::move(from);
  }

  inline CreateClusterRequest& operator=(CreateClusterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateClusterRequest& default_instance();

  static inline const CreateClusterRequest* internal_default_instance() {
    return reinterpret_cast<const CreateClusterRequest*>(
               &_CreateClusterRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CreateClusterRequest* other);
  friend void swap(CreateClusterRequest& a, CreateClusterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateClusterRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateClusterRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateClusterRequest& from);
  void MergeFrom(const CreateClusterRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateClusterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string endpoint = 5;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 5;
  const ::std::string& endpoint() const;
  void set_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_endpoint(::std::string&& value);
  #endif
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  ::std::string* mutable_endpoint();
  ::std::string* release_endpoint();
  void set_allocated_endpoint(::std::string* endpoint);

  // string internal_endpoint = 6;
  void clear_internal_endpoint();
  static const int kInternalEndpointFieldNumber = 6;
  const ::std::string& internal_endpoint() const;
  void set_internal_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_internal_endpoint(::std::string&& value);
  #endif
  void set_internal_endpoint(const char* value);
  void set_internal_endpoint(const char* value, size_t size);
  ::std::string* mutable_internal_endpoint();
  ::std::string* release_internal_endpoint();
  void set_allocated_internal_endpoint(::std::string* internal_endpoint);

  // .ClusterType cluster = 2;
  void clear_cluster();
  static const int kClusterFieldNumber = 2;
  ::ClusterType cluster() const;
  void set_cluster(::ClusterType value);

  // .ClusterStatus status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::ClusterStatus status() const;
  void set_status(::ClusterStatus value);

  // @@protoc_insertion_point(class_scope:CreateClusterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr endpoint_;
  ::google::protobuf::internal::ArenaStringPtr internal_endpoint_;
  int cluster_;
  int status_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateClusterReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CreateClusterReply) */ {
 public:
  CreateClusterReply();
  virtual ~CreateClusterReply();

  CreateClusterReply(const CreateClusterReply& from);

  inline CreateClusterReply& operator=(const CreateClusterReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateClusterReply(CreateClusterReply&& from) noexcept
    : CreateClusterReply() {
    *this = ::std::move(from);
  }

  inline CreateClusterReply& operator=(CreateClusterReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateClusterReply& default_instance();

  static inline const CreateClusterReply* internal_default_instance() {
    return reinterpret_cast<const CreateClusterReply*>(
               &_CreateClusterReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CreateClusterReply* other);
  friend void swap(CreateClusterReply& a, CreateClusterReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateClusterReply* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateClusterReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateClusterReply& from);
  void MergeFrom(const CreateClusterReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateClusterReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CreateClusterReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetClusterInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetClusterInfoRequest) */ {
 public:
  GetClusterInfoRequest();
  virtual ~GetClusterInfoRequest();

  GetClusterInfoRequest(const GetClusterInfoRequest& from);

  inline GetClusterInfoRequest& operator=(const GetClusterInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetClusterInfoRequest(GetClusterInfoRequest&& from) noexcept
    : GetClusterInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetClusterInfoRequest& operator=(GetClusterInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetClusterInfoRequest& default_instance();

  static inline const GetClusterInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetClusterInfoRequest*>(
               &_GetClusterInfoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(GetClusterInfoRequest* other);
  friend void swap(GetClusterInfoRequest& a, GetClusterInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetClusterInfoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetClusterInfoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetClusterInfoRequest& from);
  void MergeFrom(const GetClusterInfoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetClusterInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:GetClusterInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetClusterInfoReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetClusterInfoReply) */ {
 public:
  GetClusterInfoReply();
  virtual ~GetClusterInfoReply();

  GetClusterInfoReply(const GetClusterInfoReply& from);

  inline GetClusterInfoReply& operator=(const GetClusterInfoReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetClusterInfoReply(GetClusterInfoReply&& from) noexcept
    : GetClusterInfoReply() {
    *this = ::std::move(from);
  }

  inline GetClusterInfoReply& operator=(GetClusterInfoReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetClusterInfoReply& default_instance();

  static inline const GetClusterInfoReply* internal_default_instance() {
    return reinterpret_cast<const GetClusterInfoReply*>(
               &_GetClusterInfoReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(GetClusterInfoReply* other);
  friend void swap(GetClusterInfoReply& a, GetClusterInfoReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetClusterInfoReply* New() const PROTOBUF_FINAL { return New(NULL); }

  GetClusterInfoReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetClusterInfoReply& from);
  void MergeFrom(const GetClusterInfoReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetClusterInfoReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .ClusterInfo cluster = 3;
  bool has_cluster() const;
  void clear_cluster();
  static const int kClusterFieldNumber = 3;
  const ::ClusterInfo& cluster() const;
  ::ClusterInfo* mutable_cluster();
  ::ClusterInfo* release_cluster();
  void set_allocated_cluster(::ClusterInfo* cluster);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GetClusterInfoReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::ClusterInfo* cluster_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClusterInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ClusterInfo) */ {
 public:
  ClusterInfo();
  virtual ~ClusterInfo();

  ClusterInfo(const ClusterInfo& from);

  inline ClusterInfo& operator=(const ClusterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClusterInfo(ClusterInfo&& from) noexcept
    : ClusterInfo() {
    *this = ::std::move(from);
  }

  inline ClusterInfo& operator=(ClusterInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterInfo& default_instance();

  static inline const ClusterInfo* internal_default_instance() {
    return reinterpret_cast<const ClusterInfo*>(
               &_ClusterInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ClusterInfo* other);
  friend void swap(ClusterInfo& a, ClusterInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClusterInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ClusterInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClusterInfo& from);
  void MergeFrom(const ClusterInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClusterInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NodeInfo nodes = 16;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 16;
  const ::NodeInfo& nodes(int index) const;
  ::NodeInfo* mutable_nodes(int index);
  ::NodeInfo* add_nodes();
  ::google::protobuf::RepeatedPtrField< ::NodeInfo >*
      mutable_nodes();
  const ::google::protobuf::RepeatedPtrField< ::NodeInfo >&
      nodes() const;

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string endpoint = 3;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 3;
  const ::std::string& endpoint() const;
  void set_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_endpoint(::std::string&& value);
  #endif
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  ::std::string* mutable_endpoint();
  ::std::string* release_endpoint();
  void set_allocated_endpoint(::std::string* endpoint);

  // string internal_endpoint = 4;
  void clear_internal_endpoint();
  static const int kInternalEndpointFieldNumber = 4;
  const ::std::string& internal_endpoint() const;
  void set_internal_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_internal_endpoint(::std::string&& value);
  #endif
  void set_internal_endpoint(const char* value);
  void set_internal_endpoint(const char* value, size_t size);
  ::std::string* mutable_internal_endpoint();
  ::std::string* release_internal_endpoint();
  void set_allocated_internal_endpoint(::std::string* internal_endpoint);

  // string description = 6;
  void clear_description();
  static const int kDescriptionFieldNumber = 6;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string es_version = 10;
  void clear_es_version();
  static const int kEsVersionFieldNumber = 10;
  const ::std::string& es_version() const;
  void set_es_version(const ::std::string& value);
  #if LANG_CXX11
  void set_es_version(::std::string&& value);
  #endif
  void set_es_version(const char* value);
  void set_es_version(const char* value, size_t size);
  ::std::string* mutable_es_version();
  ::std::string* release_es_version();
  void set_allocated_es_version(::std::string* es_version);

  // string cluster_health = 15;
  void clear_cluster_health();
  static const int kClusterHealthFieldNumber = 15;
  const ::std::string& cluster_health() const;
  void set_cluster_health(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_health(::std::string&& value);
  #endif
  void set_cluster_health(const char* value);
  void set_cluster_health(const char* value, size_t size);
  ::std::string* mutable_cluster_health();
  ::std::string* release_cluster_health();
  void set_allocated_cluster_health(::std::string* cluster_health);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // .ClusterType type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::ClusterType type() const;
  void set_type(::ClusterType value);

  // int64 create_time = 7;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 7;
  ::google::protobuf::int64 create_time() const;
  void set_create_time(::google::protobuf::int64 value);

  // int64 last_update_time = 8;
  void clear_last_update_time();
  static const int kLastUpdateTimeFieldNumber = 8;
  ::google::protobuf::int64 last_update_time() const;
  void set_last_update_time(::google::protobuf::int64 value);

  // .ClusterStatus status = 9;
  void clear_status();
  static const int kStatusFieldNumber = 9;
  ::ClusterStatus status() const;
  void set_status(::ClusterStatus value);

  // int32 total_project_number = 11;
  void clear_total_project_number();
  static const int kTotalProjectNumberFieldNumber = 11;
  ::google::protobuf::int32 total_project_number() const;
  void set_total_project_number(::google::protobuf::int32 value);

  // int64 total_doc_number = 13;
  void clear_total_doc_number();
  static const int kTotalDocNumberFieldNumber = 13;
  ::google::protobuf::int64 total_doc_number() const;
  void set_total_doc_number(::google::protobuf::int64 value);

  // int64 total_data_size = 14;
  void clear_total_data_size();
  static const int kTotalDataSizeFieldNumber = 14;
  ::google::protobuf::int64 total_data_size() const;
  void set_total_data_size(::google::protobuf::int64 value);

  // int32 total_index_number = 12;
  void clear_total_index_number();
  static const int kTotalIndexNumberFieldNumber = 12;
  ::google::protobuf::int32 total_index_number() const;
  void set_total_index_number(::google::protobuf::int32 value);

  // int32 total_template_number = 17;
  void clear_total_template_number();
  static const int kTotalTemplateNumberFieldNumber = 17;
  ::google::protobuf::int32 total_template_number() const;
  void set_total_template_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ClusterInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NodeInfo > nodes_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr endpoint_;
  ::google::protobuf::internal::ArenaStringPtr internal_endpoint_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr es_version_;
  ::google::protobuf::internal::ArenaStringPtr cluster_health_;
  ::google::protobuf::int32 id_;
  int type_;
  ::google::protobuf::int64 create_time_;
  ::google::protobuf::int64 last_update_time_;
  int status_;
  ::google::protobuf::int32 total_project_number_;
  ::google::protobuf::int64 total_doc_number_;
  ::google::protobuf::int64 total_data_size_;
  ::google::protobuf::int32 total_index_number_;
  ::google::protobuf::int32 total_template_number_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NodeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NodeInfo) */ {
 public:
  NodeInfo();
  virtual ~NodeInfo();

  NodeInfo(const NodeInfo& from);

  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeInfo(NodeInfo&& from) noexcept
    : NodeInfo() {
    *this = ::std::move(from);
  }

  inline NodeInfo& operator=(NodeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeInfo& default_instance();

  static inline const NodeInfo* internal_default_instance() {
    return reinterpret_cast<const NodeInfo*>(
               &_NodeInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(NodeInfo* other);
  friend void swap(NodeInfo& a, NodeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  NodeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NodeInfo& from);
  void MergeFrom(const NodeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NodeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string ip_address = 3;
  void clear_ip_address();
  static const int kIpAddressFieldNumber = 3;
  const ::std::string& ip_address() const;
  void set_ip_address(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_address(::std::string&& value);
  #endif
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  ::std::string* mutable_ip_address();
  ::std::string* release_ip_address();
  void set_allocated_ip_address(::std::string* ip_address);

  // string ram_max = 6;
  void clear_ram_max();
  static const int kRamMaxFieldNumber = 6;
  const ::std::string& ram_max() const;
  void set_ram_max(const ::std::string& value);
  #if LANG_CXX11
  void set_ram_max(::std::string&& value);
  #endif
  void set_ram_max(const char* value);
  void set_ram_max(const char* value, size_t size);
  ::std::string* mutable_ram_max();
  ::std::string* release_ram_max();
  void set_allocated_ram_max(::std::string* ram_max);

  // string ram_current = 7;
  void clear_ram_current();
  static const int kRamCurrentFieldNumber = 7;
  const ::std::string& ram_current() const;
  void set_ram_current(const ::std::string& value);
  #if LANG_CXX11
  void set_ram_current(::std::string&& value);
  #endif
  void set_ram_current(const char* value);
  void set_ram_current(const char* value, size_t size);
  ::std::string* mutable_ram_current();
  ::std::string* release_ram_current();
  void set_allocated_ram_current(::std::string* ram_current);

  // string heap_max = 8;
  void clear_heap_max();
  static const int kHeapMaxFieldNumber = 8;
  const ::std::string& heap_max() const;
  void set_heap_max(const ::std::string& value);
  #if LANG_CXX11
  void set_heap_max(::std::string&& value);
  #endif
  void set_heap_max(const char* value);
  void set_heap_max(const char* value, size_t size);
  ::std::string* mutable_heap_max();
  ::std::string* release_heap_max();
  void set_allocated_heap_max(::std::string* heap_max);

  // string heap_current = 9;
  void clear_heap_current();
  static const int kHeapCurrentFieldNumber = 9;
  const ::std::string& heap_current() const;
  void set_heap_current(const ::std::string& value);
  #if LANG_CXX11
  void set_heap_current(::std::string&& value);
  #endif
  void set_heap_current(const char* value);
  void set_heap_current(const char* value, size_t size);
  ::std::string* mutable_heap_current();
  ::std::string* release_heap_current();
  void set_allocated_heap_current(::std::string* heap_current);

  // string disk_avail = 10;
  void clear_disk_avail();
  static const int kDiskAvailFieldNumber = 10;
  const ::std::string& disk_avail() const;
  void set_disk_avail(const ::std::string& value);
  #if LANG_CXX11
  void set_disk_avail(::std::string&& value);
  #endif
  void set_disk_avail(const char* value);
  void set_disk_avail(const char* value, size_t size);
  ::std::string* mutable_disk_avail();
  ::std::string* release_disk_avail();
  void set_allocated_disk_avail(::std::string* disk_avail);

  // string group = 12;
  void clear_group();
  static const int kGroupFieldNumber = 12;
  const ::std::string& group() const;
  void set_group(const ::std::string& value);
  #if LANG_CXX11
  void set_group(::std::string&& value);
  #endif
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  ::std::string* mutable_group();
  ::std::string* release_group();
  void set_allocated_group(::std::string* group);

  // string tag = 13;
  void clear_tag();
  static const int kTagFieldNumber = 13;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // bool is_master = 4;
  void clear_is_master();
  static const int kIsMasterFieldNumber = 4;
  bool is_master() const;
  void set_is_master(bool value);

  // double cpu_percent = 5;
  void clear_cpu_percent();
  static const int kCpuPercentFieldNumber = 5;
  double cpu_percent() const;
  void set_cpu_percent(double value);

  // double disk_percent = 11;
  void clear_disk_percent();
  static const int kDiskPercentFieldNumber = 11;
  double disk_percent() const;
  void set_disk_percent(double value);

  // @@protoc_insertion_point(class_scope:NodeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr ip_address_;
  ::google::protobuf::internal::ArenaStringPtr ram_max_;
  ::google::protobuf::internal::ArenaStringPtr ram_current_;
  ::google::protobuf::internal::ArenaStringPtr heap_max_;
  ::google::protobuf::internal::ArenaStringPtr heap_current_;
  ::google::protobuf::internal::ArenaStringPtr disk_avail_;
  ::google::protobuf::internal::ArenaStringPtr group_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::google::protobuf::int32 id_;
  bool is_master_;
  double cpu_percent_;
  double disk_percent_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateClusterInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UpdateClusterInfoRequest) */ {
 public:
  UpdateClusterInfoRequest();
  virtual ~UpdateClusterInfoRequest();

  UpdateClusterInfoRequest(const UpdateClusterInfoRequest& from);

  inline UpdateClusterInfoRequest& operator=(const UpdateClusterInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateClusterInfoRequest(UpdateClusterInfoRequest&& from) noexcept
    : UpdateClusterInfoRequest() {
    *this = ::std::move(from);
  }

  inline UpdateClusterInfoRequest& operator=(UpdateClusterInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateClusterInfoRequest& default_instance();

  static inline const UpdateClusterInfoRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateClusterInfoRequest*>(
               &_UpdateClusterInfoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(UpdateClusterInfoRequest* other);
  friend void swap(UpdateClusterInfoRequest& a, UpdateClusterInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateClusterInfoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateClusterInfoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateClusterInfoRequest& from);
  void MergeFrom(const UpdateClusterInfoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateClusterInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 4;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string internal_endpoint = 5;
  void clear_internal_endpoint();
  static const int kInternalEndpointFieldNumber = 5;
  const ::std::string& internal_endpoint() const;
  void set_internal_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_internal_endpoint(::std::string&& value);
  #endif
  void set_internal_endpoint(const char* value);
  void set_internal_endpoint(const char* value, size_t size);
  ::std::string* mutable_internal_endpoint();
  ::std::string* release_internal_endpoint();
  void set_allocated_internal_endpoint(::std::string* internal_endpoint);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // .ClusterStatus status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::ClusterStatus status() const;
  void set_status(::ClusterStatus value);

  // @@protoc_insertion_point(class_scope:UpdateClusterInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr internal_endpoint_;
  ::google::protobuf::int32 id_;
  int status_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateClusterInfoReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UpdateClusterInfoReply) */ {
 public:
  UpdateClusterInfoReply();
  virtual ~UpdateClusterInfoReply();

  UpdateClusterInfoReply(const UpdateClusterInfoReply& from);

  inline UpdateClusterInfoReply& operator=(const UpdateClusterInfoReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateClusterInfoReply(UpdateClusterInfoReply&& from) noexcept
    : UpdateClusterInfoReply() {
    *this = ::std::move(from);
  }

  inline UpdateClusterInfoReply& operator=(UpdateClusterInfoReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateClusterInfoReply& default_instance();

  static inline const UpdateClusterInfoReply* internal_default_instance() {
    return reinterpret_cast<const UpdateClusterInfoReply*>(
               &_UpdateClusterInfoReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(UpdateClusterInfoReply* other);
  friend void swap(UpdateClusterInfoReply& a, UpdateClusterInfoReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateClusterInfoReply* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateClusterInfoReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateClusterInfoReply& from);
  void MergeFrom(const UpdateClusterInfoReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateClusterInfoReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UpdateClusterInfoReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteClusterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DeleteClusterRequest) */ {
 public:
  DeleteClusterRequest();
  virtual ~DeleteClusterRequest();

  DeleteClusterRequest(const DeleteClusterRequest& from);

  inline DeleteClusterRequest& operator=(const DeleteClusterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteClusterRequest(DeleteClusterRequest&& from) noexcept
    : DeleteClusterRequest() {
    *this = ::std::move(from);
  }

  inline DeleteClusterRequest& operator=(DeleteClusterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteClusterRequest& default_instance();

  static inline const DeleteClusterRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteClusterRequest*>(
               &_DeleteClusterRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(DeleteClusterRequest* other);
  friend void swap(DeleteClusterRequest& a, DeleteClusterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteClusterRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteClusterRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteClusterRequest& from);
  void MergeFrom(const DeleteClusterRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteClusterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:DeleteClusterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteClusterReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DeleteClusterReply) */ {
 public:
  DeleteClusterReply();
  virtual ~DeleteClusterReply();

  DeleteClusterReply(const DeleteClusterReply& from);

  inline DeleteClusterReply& operator=(const DeleteClusterReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteClusterReply(DeleteClusterReply&& from) noexcept
    : DeleteClusterReply() {
    *this = ::std::move(from);
  }

  inline DeleteClusterReply& operator=(DeleteClusterReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteClusterReply& default_instance();

  static inline const DeleteClusterReply* internal_default_instance() {
    return reinterpret_cast<const DeleteClusterReply*>(
               &_DeleteClusterReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(DeleteClusterReply* other);
  friend void swap(DeleteClusterReply& a, DeleteClusterReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteClusterReply* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteClusterReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteClusterReply& from);
  void MergeFrom(const DeleteClusterReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteClusterReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DeleteClusterReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListClusterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ListClusterRequest) */ {
 public:
  ListClusterRequest();
  virtual ~ListClusterRequest();

  ListClusterRequest(const ListClusterRequest& from);

  inline ListClusterRequest& operator=(const ListClusterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListClusterRequest(ListClusterRequest&& from) noexcept
    : ListClusterRequest() {
    *this = ::std::move(from);
  }

  inline ListClusterRequest& operator=(ListClusterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListClusterRequest& default_instance();

  static inline const ListClusterRequest* internal_default_instance() {
    return reinterpret_cast<const ListClusterRequest*>(
               &_ListClusterRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(ListClusterRequest* other);
  friend void swap(ListClusterRequest& a, ListClusterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListClusterRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListClusterRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListClusterRequest& from);
  void MergeFrom(const ListClusterRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListClusterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ListClusterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListClusterReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ListClusterReply) */ {
 public:
  ListClusterReply();
  virtual ~ListClusterReply();

  ListClusterReply(const ListClusterReply& from);

  inline ListClusterReply& operator=(const ListClusterReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListClusterReply(ListClusterReply&& from) noexcept
    : ListClusterReply() {
    *this = ::std::move(from);
  }

  inline ListClusterReply& operator=(ListClusterReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListClusterReply& default_instance();

  static inline const ListClusterReply* internal_default_instance() {
    return reinterpret_cast<const ListClusterReply*>(
               &_ListClusterReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(ListClusterReply* other);
  friend void swap(ListClusterReply& a, ListClusterReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListClusterReply* New() const PROTOBUF_FINAL { return New(NULL); }

  ListClusterReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListClusterReply& from);
  void MergeFrom(const ListClusterReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListClusterReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string clusters = 3;
  int clusters_size() const;
  void clear_clusters();
  static const int kClustersFieldNumber = 3;
  const ::std::string& clusters(int index) const;
  ::std::string* mutable_clusters(int index);
  void set_clusters(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_clusters(int index, ::std::string&& value);
  #endif
  void set_clusters(int index, const char* value);
  void set_clusters(int index, const char* value, size_t size);
  ::std::string* add_clusters();
  void add_clusters(const ::std::string& value);
  #if LANG_CXX11
  void add_clusters(::std::string&& value);
  #endif
  void add_clusters(const char* value);
  void add_clusters(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& clusters() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_clusters();

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ListClusterReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> clusters_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListClusterDetailsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ListClusterDetailsRequest) */ {
 public:
  ListClusterDetailsRequest();
  virtual ~ListClusterDetailsRequest();

  ListClusterDetailsRequest(const ListClusterDetailsRequest& from);

  inline ListClusterDetailsRequest& operator=(const ListClusterDetailsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListClusterDetailsRequest(ListClusterDetailsRequest&& from) noexcept
    : ListClusterDetailsRequest() {
    *this = ::std::move(from);
  }

  inline ListClusterDetailsRequest& operator=(ListClusterDetailsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListClusterDetailsRequest& default_instance();

  static inline const ListClusterDetailsRequest* internal_default_instance() {
    return reinterpret_cast<const ListClusterDetailsRequest*>(
               &_ListClusterDetailsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(ListClusterDetailsRequest* other);
  friend void swap(ListClusterDetailsRequest& a, ListClusterDetailsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListClusterDetailsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListClusterDetailsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListClusterDetailsRequest& from);
  void MergeFrom(const ListClusterDetailsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListClusterDetailsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ListClusterDetailsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListClusterDetailsReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ListClusterDetailsReply) */ {
 public:
  ListClusterDetailsReply();
  virtual ~ListClusterDetailsReply();

  ListClusterDetailsReply(const ListClusterDetailsReply& from);

  inline ListClusterDetailsReply& operator=(const ListClusterDetailsReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListClusterDetailsReply(ListClusterDetailsReply&& from) noexcept
    : ListClusterDetailsReply() {
    *this = ::std::move(from);
  }

  inline ListClusterDetailsReply& operator=(ListClusterDetailsReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListClusterDetailsReply& default_instance();

  static inline const ListClusterDetailsReply* internal_default_instance() {
    return reinterpret_cast<const ListClusterDetailsReply*>(
               &_ListClusterDetailsReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(ListClusterDetailsReply* other);
  friend void swap(ListClusterDetailsReply& a, ListClusterDetailsReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListClusterDetailsReply* New() const PROTOBUF_FINAL { return New(NULL); }

  ListClusterDetailsReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListClusterDetailsReply& from);
  void MergeFrom(const ListClusterDetailsReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListClusterDetailsReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ClusterInfo clusters = 3;
  int clusters_size() const;
  void clear_clusters();
  static const int kClustersFieldNumber = 3;
  const ::ClusterInfo& clusters(int index) const;
  ::ClusterInfo* mutable_clusters(int index);
  ::ClusterInfo* add_clusters();
  ::google::protobuf::RepeatedPtrField< ::ClusterInfo >*
      mutable_clusters();
  const ::google::protobuf::RepeatedPtrField< ::ClusterInfo >&
      clusters() const;

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ListClusterDetailsReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ClusterInfo > clusters_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateProjectRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CreateProjectRequest) */ {
 public:
  CreateProjectRequest();
  virtual ~CreateProjectRequest();

  CreateProjectRequest(const CreateProjectRequest& from);

  inline CreateProjectRequest& operator=(const CreateProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateProjectRequest(CreateProjectRequest&& from) noexcept
    : CreateProjectRequest() {
    *this = ::std::move(from);
  }

  inline CreateProjectRequest& operator=(CreateProjectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateProjectRequest& default_instance();

  static inline const CreateProjectRequest* internal_default_instance() {
    return reinterpret_cast<const CreateProjectRequest*>(
               &_CreateProjectRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(CreateProjectRequest* other);
  friend void swap(CreateProjectRequest& a, CreateProjectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateProjectRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateProjectRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateProjectRequest& from);
  void MergeFrom(const CreateProjectRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateProjectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string cluster = 2;
  void clear_cluster();
  static const int kClusterFieldNumber = 2;
  const ::std::string& cluster() const;
  void set_cluster(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster(::std::string&& value);
  #endif
  void set_cluster(const char* value);
  void set_cluster(const char* value, size_t size);
  ::std::string* mutable_cluster();
  ::std::string* release_cluster();
  void set_allocated_cluster(::std::string* cluster);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:CreateProjectRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr cluster_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateProjectReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CreateProjectReply) */ {
 public:
  CreateProjectReply();
  virtual ~CreateProjectReply();

  CreateProjectReply(const CreateProjectReply& from);

  inline CreateProjectReply& operator=(const CreateProjectReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateProjectReply(CreateProjectReply&& from) noexcept
    : CreateProjectReply() {
    *this = ::std::move(from);
  }

  inline CreateProjectReply& operator=(CreateProjectReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateProjectReply& default_instance();

  static inline const CreateProjectReply* internal_default_instance() {
    return reinterpret_cast<const CreateProjectReply*>(
               &_CreateProjectReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(CreateProjectReply* other);
  friend void swap(CreateProjectReply& a, CreateProjectReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateProjectReply* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateProjectReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateProjectReply& from);
  void MergeFrom(const CreateProjectReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateProjectReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CreateProjectReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteProjectRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DeleteProjectRequest) */ {
 public:
  DeleteProjectRequest();
  virtual ~DeleteProjectRequest();

  DeleteProjectRequest(const DeleteProjectRequest& from);

  inline DeleteProjectRequest& operator=(const DeleteProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteProjectRequest(DeleteProjectRequest&& from) noexcept
    : DeleteProjectRequest() {
    *this = ::std::move(from);
  }

  inline DeleteProjectRequest& operator=(DeleteProjectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteProjectRequest& default_instance();

  static inline const DeleteProjectRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteProjectRequest*>(
               &_DeleteProjectRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(DeleteProjectRequest* other);
  friend void swap(DeleteProjectRequest& a, DeleteProjectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteProjectRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteProjectRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteProjectRequest& from);
  void MergeFrom(const DeleteProjectRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteProjectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .ProjectStatus status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::ProjectStatus status() const;
  void set_status(::ProjectStatus value);

  // @@protoc_insertion_point(class_scope:DeleteProjectRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int status_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteProjectReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DeleteProjectReply) */ {
 public:
  DeleteProjectReply();
  virtual ~DeleteProjectReply();

  DeleteProjectReply(const DeleteProjectReply& from);

  inline DeleteProjectReply& operator=(const DeleteProjectReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteProjectReply(DeleteProjectReply&& from) noexcept
    : DeleteProjectReply() {
    *this = ::std::move(from);
  }

  inline DeleteProjectReply& operator=(DeleteProjectReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteProjectReply& default_instance();

  static inline const DeleteProjectReply* internal_default_instance() {
    return reinterpret_cast<const DeleteProjectReply*>(
               &_DeleteProjectReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(DeleteProjectReply* other);
  friend void swap(DeleteProjectReply& a, DeleteProjectReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteProjectReply* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteProjectReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteProjectReply& from);
  void MergeFrom(const DeleteProjectReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteProjectReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DeleteProjectReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateProjectRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UpdateProjectRequest) */ {
 public:
  UpdateProjectRequest();
  virtual ~UpdateProjectRequest();

  UpdateProjectRequest(const UpdateProjectRequest& from);

  inline UpdateProjectRequest& operator=(const UpdateProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateProjectRequest(UpdateProjectRequest&& from) noexcept
    : UpdateProjectRequest() {
    *this = ::std::move(from);
  }

  inline UpdateProjectRequest& operator=(UpdateProjectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateProjectRequest& default_instance();

  static inline const UpdateProjectRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateProjectRequest*>(
               &_UpdateProjectRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(UpdateProjectRequest* other);
  friend void swap(UpdateProjectRequest& a, UpdateProjectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateProjectRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateProjectRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateProjectRequest& from);
  void MergeFrom(const UpdateProjectRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateProjectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UpdateProjectRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateProjectReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UpdateProjectReply) */ {
 public:
  UpdateProjectReply();
  virtual ~UpdateProjectReply();

  UpdateProjectReply(const UpdateProjectReply& from);

  inline UpdateProjectReply& operator=(const UpdateProjectReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateProjectReply(UpdateProjectReply&& from) noexcept
    : UpdateProjectReply() {
    *this = ::std::move(from);
  }

  inline UpdateProjectReply& operator=(UpdateProjectReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateProjectReply& default_instance();

  static inline const UpdateProjectReply* internal_default_instance() {
    return reinterpret_cast<const UpdateProjectReply*>(
               &_UpdateProjectReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(UpdateProjectReply* other);
  friend void swap(UpdateProjectReply& a, UpdateProjectReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateProjectReply* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateProjectReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateProjectReply& from);
  void MergeFrom(const UpdateProjectReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateProjectReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UpdateProjectReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetProjectRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetProjectRequest) */ {
 public:
  GetProjectRequest();
  virtual ~GetProjectRequest();

  GetProjectRequest(const GetProjectRequest& from);

  inline GetProjectRequest& operator=(const GetProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetProjectRequest(GetProjectRequest&& from) noexcept
    : GetProjectRequest() {
    *this = ::std::move(from);
  }

  inline GetProjectRequest& operator=(GetProjectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetProjectRequest& default_instance();

  static inline const GetProjectRequest* internal_default_instance() {
    return reinterpret_cast<const GetProjectRequest*>(
               &_GetProjectRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(GetProjectRequest* other);
  friend void swap(GetProjectRequest& a, GetProjectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetProjectRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetProjectRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetProjectRequest& from);
  void MergeFrom(const GetProjectRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetProjectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:GetProjectRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetProjectReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetProjectReply) */ {
 public:
  GetProjectReply();
  virtual ~GetProjectReply();

  GetProjectReply(const GetProjectReply& from);

  inline GetProjectReply& operator=(const GetProjectReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetProjectReply(GetProjectReply&& from) noexcept
    : GetProjectReply() {
    *this = ::std::move(from);
  }

  inline GetProjectReply& operator=(GetProjectReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetProjectReply& default_instance();

  static inline const GetProjectReply* internal_default_instance() {
    return reinterpret_cast<const GetProjectReply*>(
               &_GetProjectReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(GetProjectReply* other);
  friend void swap(GetProjectReply& a, GetProjectReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetProjectReply* New() const PROTOBUF_FINAL { return New(NULL); }

  GetProjectReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetProjectReply& from);
  void MergeFrom(const GetProjectReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetProjectReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .ProjectInfo project = 3;
  bool has_project() const;
  void clear_project();
  static const int kProjectFieldNumber = 3;
  const ::ProjectInfo& project() const;
  ::ProjectInfo* mutable_project();
  ::ProjectInfo* release_project();
  void set_allocated_project(::ProjectInfo* project);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GetProjectReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::ProjectInfo* project_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProjectInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProjectInfo) */ {
 public:
  ProjectInfo();
  virtual ~ProjectInfo();

  ProjectInfo(const ProjectInfo& from);

  inline ProjectInfo& operator=(const ProjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProjectInfo(ProjectInfo&& from) noexcept
    : ProjectInfo() {
    *this = ::std::move(from);
  }

  inline ProjectInfo& operator=(ProjectInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProjectInfo& default_instance();

  static inline const ProjectInfo* internal_default_instance() {
    return reinterpret_cast<const ProjectInfo*>(
               &_ProjectInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(ProjectInfo* other);
  friend void swap(ProjectInfo& a, ProjectInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProjectInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ProjectInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProjectInfo& from);
  void MergeFrom(const ProjectInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProjectInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string cluster_name = 3;
  void clear_cluster_name();
  static const int kClusterNameFieldNumber = 3;
  const ::std::string& cluster_name() const;
  void set_cluster_name(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_name(::std::string&& value);
  #endif
  void set_cluster_name(const char* value);
  void set_cluster_name(const char* value, size_t size);
  ::std::string* mutable_cluster_name();
  ::std::string* release_cluster_name();
  void set_allocated_cluster_name(::std::string* cluster_name);

  // string description = 4;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 total_index_number = 5;
  void clear_total_index_number();
  static const int kTotalIndexNumberFieldNumber = 5;
  ::google::protobuf::int32 total_index_number() const;
  void set_total_index_number(::google::protobuf::int32 value);

  // int64 total_doc_number = 6;
  void clear_total_doc_number();
  static const int kTotalDocNumberFieldNumber = 6;
  ::google::protobuf::int64 total_doc_number() const;
  void set_total_doc_number(::google::protobuf::int64 value);

  // int64 total_data_size = 7;
  void clear_total_data_size();
  static const int kTotalDataSizeFieldNumber = 7;
  ::google::protobuf::int64 total_data_size() const;
  void set_total_data_size(::google::protobuf::int64 value);

  // int32 cluster_id = 8;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 8;
  ::google::protobuf::int32 cluster_id() const;
  void set_cluster_id(::google::protobuf::int32 value);

  // .ProjectStatus status = 9;
  void clear_status();
  static const int kStatusFieldNumber = 9;
  ::ProjectStatus status() const;
  void set_status(::ProjectStatus value);

  // int32 total_template_number = 17;
  void clear_total_template_number();
  static const int kTotalTemplateNumberFieldNumber = 17;
  ::google::protobuf::int32 total_template_number() const;
  void set_total_template_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProjectInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr cluster_name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 total_index_number_;
  ::google::protobuf::int64 total_doc_number_;
  ::google::protobuf::int64 total_data_size_;
  ::google::protobuf::int32 cluster_id_;
  int status_;
  ::google::protobuf::int32 total_template_number_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListProjectRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ListProjectRequest) */ {
 public:
  ListProjectRequest();
  virtual ~ListProjectRequest();

  ListProjectRequest(const ListProjectRequest& from);

  inline ListProjectRequest& operator=(const ListProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListProjectRequest(ListProjectRequest&& from) noexcept
    : ListProjectRequest() {
    *this = ::std::move(from);
  }

  inline ListProjectRequest& operator=(ListProjectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListProjectRequest& default_instance();

  static inline const ListProjectRequest* internal_default_instance() {
    return reinterpret_cast<const ListProjectRequest*>(
               &_ListProjectRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(ListProjectRequest* other);
  friend void swap(ListProjectRequest& a, ListProjectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListProjectRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListProjectRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListProjectRequest& from);
  void MergeFrom(const ListProjectRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListProjectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cluster_id = 1;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 1;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:ListProjectRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListProjectReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ListProjectReply) */ {
 public:
  ListProjectReply();
  virtual ~ListProjectReply();

  ListProjectReply(const ListProjectReply& from);

  inline ListProjectReply& operator=(const ListProjectReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListProjectReply(ListProjectReply&& from) noexcept
    : ListProjectReply() {
    *this = ::std::move(from);
  }

  inline ListProjectReply& operator=(ListProjectReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListProjectReply& default_instance();

  static inline const ListProjectReply* internal_default_instance() {
    return reinterpret_cast<const ListProjectReply*>(
               &_ListProjectReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(ListProjectReply* other);
  friend void swap(ListProjectReply& a, ListProjectReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListProjectReply* New() const PROTOBUF_FINAL { return New(NULL); }

  ListProjectReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListProjectReply& from);
  void MergeFrom(const ListProjectReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListProjectReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string projects = 3;
  int projects_size() const;
  void clear_projects();
  static const int kProjectsFieldNumber = 3;
  const ::std::string& projects(int index) const;
  ::std::string* mutable_projects(int index);
  void set_projects(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_projects(int index, ::std::string&& value);
  #endif
  void set_projects(int index, const char* value);
  void set_projects(int index, const char* value, size_t size);
  ::std::string* add_projects();
  void add_projects(const ::std::string& value);
  #if LANG_CXX11
  void add_projects(::std::string&& value);
  #endif
  void add_projects(const char* value);
  void add_projects(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& projects() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_projects();

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ListProjectReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> projects_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListProjectDetailsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ListProjectDetailsRequest) */ {
 public:
  ListProjectDetailsRequest();
  virtual ~ListProjectDetailsRequest();

  ListProjectDetailsRequest(const ListProjectDetailsRequest& from);

  inline ListProjectDetailsRequest& operator=(const ListProjectDetailsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListProjectDetailsRequest(ListProjectDetailsRequest&& from) noexcept
    : ListProjectDetailsRequest() {
    *this = ::std::move(from);
  }

  inline ListProjectDetailsRequest& operator=(ListProjectDetailsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListProjectDetailsRequest& default_instance();

  static inline const ListProjectDetailsRequest* internal_default_instance() {
    return reinterpret_cast<const ListProjectDetailsRequest*>(
               &_ListProjectDetailsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(ListProjectDetailsRequest* other);
  friend void swap(ListProjectDetailsRequest& a, ListProjectDetailsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListProjectDetailsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListProjectDetailsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListProjectDetailsRequest& from);
  void MergeFrom(const ListProjectDetailsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListProjectDetailsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cluster = 1;
  void clear_cluster();
  static const int kClusterFieldNumber = 1;
  const ::std::string& cluster() const;
  void set_cluster(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster(::std::string&& value);
  #endif
  void set_cluster(const char* value);
  void set_cluster(const char* value, size_t size);
  ::std::string* mutable_cluster();
  ::std::string* release_cluster();
  void set_allocated_cluster(::std::string* cluster);

  // @@protoc_insertion_point(class_scope:ListProjectDetailsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cluster_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListProjectDetailsReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ListProjectDetailsReply) */ {
 public:
  ListProjectDetailsReply();
  virtual ~ListProjectDetailsReply();

  ListProjectDetailsReply(const ListProjectDetailsReply& from);

  inline ListProjectDetailsReply& operator=(const ListProjectDetailsReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListProjectDetailsReply(ListProjectDetailsReply&& from) noexcept
    : ListProjectDetailsReply() {
    *this = ::std::move(from);
  }

  inline ListProjectDetailsReply& operator=(ListProjectDetailsReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListProjectDetailsReply& default_instance();

  static inline const ListProjectDetailsReply* internal_default_instance() {
    return reinterpret_cast<const ListProjectDetailsReply*>(
               &_ListProjectDetailsReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(ListProjectDetailsReply* other);
  friend void swap(ListProjectDetailsReply& a, ListProjectDetailsReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListProjectDetailsReply* New() const PROTOBUF_FINAL { return New(NULL); }

  ListProjectDetailsReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListProjectDetailsReply& from);
  void MergeFrom(const ListProjectDetailsReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListProjectDetailsReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProjectInfo projects = 3;
  int projects_size() const;
  void clear_projects();
  static const int kProjectsFieldNumber = 3;
  const ::ProjectInfo& projects(int index) const;
  ::ProjectInfo* mutable_projects(int index);
  ::ProjectInfo* add_projects();
  ::google::protobuf::RepeatedPtrField< ::ProjectInfo >*
      mutable_projects();
  const ::google::protobuf::RepeatedPtrField< ::ProjectInfo >&
      projects() const;

  // string error_message = 2;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 2;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // int32 error_code = 1;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ListProjectDetailsReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ProjectInfo > projects_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::google::protobuf::int32 error_code_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateIndexRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CreateIndexRequest) */ {
 public:
  CreateIndexRequest();
  virtual ~CreateIndexRequest();

  CreateIndexRequest(const CreateIndexRequest& from);

  inline CreateIndexRequest& operator=(const CreateIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateIndexRequest(CreateIndexRequest&& from) noexcept
    : CreateIndexRequest() {
    *this = ::std::move(from);
  }

  inline CreateIndexRequest& operator=(CreateIndexRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateIndexRequest& default_instance();

  static inline const CreateIndexRequest* internal_default_instance() {
    return reinterpret_cast<const CreateIndexRequest*>(
               &_CreateIndexRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(CreateIndexRequest* other);
  friend void swap(CreateIndexRequest& a, CreateIndexRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateIndexRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateIndexRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateIndexRequest& from);
  void MergeFrom(const CreateIndexRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateIndexRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string aliases = 4;
  int aliases_size() const;
  void clear_aliases();
  static const int kAliasesFieldNumber = 4;
  const ::std::string& aliases(int index) const;
  ::std::string* mutable_aliases(int index);
  void set_aliases(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_aliases(int index, ::std::string&& value);
  #endif
  void set_aliases(int index, const char* value);
  void set_aliases(int index, const char* value, size_t size);
  ::std::string* add_aliases();
  void add_aliases(const ::std::string& value);
  #if LANG_CXX11
  void add_aliases(::std::string&& value);
  #endif
  void add_aliases(const char* value);
  void add_aliases(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& aliases() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_aliases();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string project = 2;
  void clear_project();
  static const int kProjectFieldNumber = 2;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);

  // .google.protobuf.StringValue mapping = 5;
  bool has_mapping() const;
  void clear_mapping();
  static const int kMappingFieldNumber = 5;
  const ::google::protobuf::StringValue& mapping() const;
  ::google::protobuf::StringValue* mutable_mapping();
  ::google::protobuf::StringValue* release_mapping();
  void set_allocated_mapping(::google::protobuf::StringValue* mapping);

  // .google.protobuf.StringValue setting = 6;
  bool has_setting() const;
  void clear_setting();
  static const int kSettingFieldNumber = 6;
  const ::google::protobuf::StringValue& setting() const;
  ::google::protobuf::StringValue* mutable_setting();
  ::google::protobuf::StringValue* release_setting();
  void set_allocated_setting(::google::protobuf::StringValue* setting);

  // .AutoIndexRollingPolicy rolling_policy = 7;
  void clear_rolling_policy();
  static const int kRollingPolicyFieldNumber = 7;
  ::AutoIndexRollingPolicy rolling_policy() const;
  void set_rolling_policy(::AutoIndexRollingPolicy value);

  // @@protoc_insertion_point(class_scope:CreateIndexRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> aliases_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::StringValue* mapping_;
  ::google::protobuf::StringValue* setting_;
  int rolling_policy_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateIndexReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CreateIndexReply) */ {
 public:
  CreateIndexReply();
  virtual ~CreateIndexReply();

  CreateIndexReply(const CreateIndexReply& from);

  inline CreateIndexReply& operator=(const CreateIndexReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateIndexReply(CreateIndexReply&& from) noexcept
    : CreateIndexReply() {
    *this = ::std::move(from);
  }

  inline CreateIndexReply& operator=(CreateIndexReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateIndexReply& default_instance();

  static inline const CreateIndexReply* internal_default_instance() {
    return reinterpret_cast<const CreateIndexReply*>(
               &_CreateIndexReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(CreateIndexReply* other);
  friend void swap(CreateIndexReply& a, CreateIndexReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateIndexReply* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateIndexReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateIndexReply& from);
  void MergeFrom(const CreateIndexReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateIndexReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CreateIndexReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetIndexRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetIndexRequest) */ {
 public:
  GetIndexRequest();
  virtual ~GetIndexRequest();

  GetIndexRequest(const GetIndexRequest& from);

  inline GetIndexRequest& operator=(const GetIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetIndexRequest(GetIndexRequest&& from) noexcept
    : GetIndexRequest() {
    *this = ::std::move(from);
  }

  inline GetIndexRequest& operator=(GetIndexRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetIndexRequest& default_instance();

  static inline const GetIndexRequest* internal_default_instance() {
    return reinterpret_cast<const GetIndexRequest*>(
               &_GetIndexRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(GetIndexRequest* other);
  friend void swap(GetIndexRequest& a, GetIndexRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetIndexRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetIndexRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetIndexRequest& from);
  void MergeFrom(const GetIndexRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetIndexRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 index_id = 1;
  void clear_index_id();
  static const int kIndexIdFieldNumber = 1;
  ::google::protobuf::int32 index_id() const;
  void set_index_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GetIndexRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 index_id_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetIndexReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetIndexReply) */ {
 public:
  GetIndexReply();
  virtual ~GetIndexReply();

  GetIndexReply(const GetIndexReply& from);

  inline GetIndexReply& operator=(const GetIndexReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetIndexReply(GetIndexReply&& from) noexcept
    : GetIndexReply() {
    *this = ::std::move(from);
  }

  inline GetIndexReply& operator=(GetIndexReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetIndexReply& default_instance();

  static inline const GetIndexReply* internal_default_instance() {
    return reinterpret_cast<const GetIndexReply*>(
               &_GetIndexReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(GetIndexReply* other);
  friend void swap(GetIndexReply& a, GetIndexReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetIndexReply* New() const PROTOBUF_FINAL { return New(NULL); }

  GetIndexReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetIndexReply& from);
  void MergeFrom(const GetIndexReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetIndexReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .IndexInfo index = 3;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 3;
  const ::IndexInfo& index() const;
  ::IndexInfo* mutable_index();
  ::IndexInfo* release_index();
  void set_allocated_index(::IndexInfo* index);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GetIndexReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::IndexInfo* index_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IndexInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndexInfo) */ {
 public:
  IndexInfo();
  virtual ~IndexInfo();

  IndexInfo(const IndexInfo& from);

  inline IndexInfo& operator=(const IndexInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IndexInfo(IndexInfo&& from) noexcept
    : IndexInfo() {
    *this = ::std::move(from);
  }

  inline IndexInfo& operator=(IndexInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexInfo& default_instance();

  static inline const IndexInfo* internal_default_instance() {
    return reinterpret_cast<const IndexInfo*>(
               &_IndexInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(IndexInfo* other);
  friend void swap(IndexInfo& a, IndexInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IndexInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  IndexInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IndexInfo& from);
  void MergeFrom(const IndexInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IndexInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string aliases = 7;
  int aliases_size() const;
  void clear_aliases();
  static const int kAliasesFieldNumber = 7;
  const ::std::string& aliases(int index) const;
  ::std::string* mutable_aliases(int index);
  void set_aliases(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_aliases(int index, ::std::string&& value);
  #endif
  void set_aliases(int index, const char* value);
  void set_aliases(int index, const char* value, size_t size);
  ::std::string* add_aliases();
  void add_aliases(const ::std::string& value);
  #if LANG_CXX11
  void add_aliases(::std::string&& value);
  #endif
  void add_aliases(const char* value);
  void add_aliases(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& aliases() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_aliases();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string cluster_name = 2;
  void clear_cluster_name();
  static const int kClusterNameFieldNumber = 2;
  const ::std::string& cluster_name() const;
  void set_cluster_name(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_name(::std::string&& value);
  #endif
  void set_cluster_name(const char* value);
  void set_cluster_name(const char* value, size_t size);
  ::std::string* mutable_cluster_name();
  ::std::string* release_cluster_name();
  void set_allocated_cluster_name(::std::string* cluster_name);

  // string project_name = 3;
  void clear_project_name();
  static const int kProjectNameFieldNumber = 3;
  const ::std::string& project_name() const;
  void set_project_name(const ::std::string& value);
  #if LANG_CXX11
  void set_project_name(::std::string&& value);
  #endif
  void set_project_name(const char* value);
  void set_project_name(const char* value, size_t size);
  ::std::string* mutable_project_name();
  ::std::string* release_project_name();
  void set_allocated_project_name(::std::string* project_name);

  // string mapping = 5;
  void clear_mapping();
  static const int kMappingFieldNumber = 5;
  const ::std::string& mapping() const;
  void set_mapping(const ::std::string& value);
  #if LANG_CXX11
  void set_mapping(::std::string&& value);
  #endif
  void set_mapping(const char* value);
  void set_mapping(const char* value, size_t size);
  ::std::string* mutable_mapping();
  ::std::string* release_mapping();
  void set_allocated_mapping(::std::string* mapping);

  // string setting = 6;
  void clear_setting();
  static const int kSettingFieldNumber = 6;
  const ::std::string& setting() const;
  void set_setting(const ::std::string& value);
  #if LANG_CXX11
  void set_setting(::std::string&& value);
  #endif
  void set_setting(const char* value);
  void set_setting(const char* value, size_t size);
  ::std::string* mutable_setting();
  ::std::string* release_setting();
  void set_allocated_setting(::std::string* setting);

  // string index_health = 12;
  void clear_index_health();
  static const int kIndexHealthFieldNumber = 12;
  const ::std::string& index_health() const;
  void set_index_health(const ::std::string& value);
  #if LANG_CXX11
  void set_index_health(::std::string&& value);
  #endif
  void set_index_health(const char* value);
  void set_index_health(const char* value, size_t size);
  ::std::string* mutable_index_health();
  ::std::string* release_index_health();
  void set_allocated_index_health(::std::string* index_health);

  // string project_id = 13;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 13;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string cluster_id = 14;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 14;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // int64 total_doc_number = 8;
  void clear_total_doc_number();
  static const int kTotalDocNumberFieldNumber = 8;
  ::google::protobuf::int64 total_doc_number() const;
  void set_total_doc_number(::google::protobuf::int64 value);

  // int64 total_data_size = 9;
  void clear_total_data_size();
  static const int kTotalDataSizeFieldNumber = 9;
  ::google::protobuf::int64 total_data_size() const;
  void set_total_data_size(::google::protobuf::int64 value);

  // int32 primary_shard_number = 10;
  void clear_primary_shard_number();
  static const int kPrimaryShardNumberFieldNumber = 10;
  ::google::protobuf::int32 primary_shard_number() const;
  void set_primary_shard_number(::google::protobuf::int32 value);

  // int32 replica_shard_number = 11;
  void clear_replica_shard_number();
  static const int kReplicaShardNumberFieldNumber = 11;
  ::google::protobuf::int32 replica_shard_number() const;
  void set_replica_shard_number(::google::protobuf::int32 value);

  // .AutoIndexRollingPolicy rolling_policy = 15;
  void clear_rolling_policy();
  static const int kRollingPolicyFieldNumber = 15;
  ::AutoIndexRollingPolicy rolling_policy() const;
  void set_rolling_policy(::AutoIndexRollingPolicy value);

  // int32 index_id = 16;
  void clear_index_id();
  static const int kIndexIdFieldNumber = 16;
  ::google::protobuf::int32 index_id() const;
  void set_index_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:IndexInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> aliases_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr cluster_name_;
  ::google::protobuf::internal::ArenaStringPtr project_name_;
  ::google::protobuf::internal::ArenaStringPtr mapping_;
  ::google::protobuf::internal::ArenaStringPtr setting_;
  ::google::protobuf::internal::ArenaStringPtr index_health_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::int64 total_doc_number_;
  ::google::protobuf::int64 total_data_size_;
  ::google::protobuf::int32 primary_shard_number_;
  ::google::protobuf::int32 replica_shard_number_;
  int rolling_policy_;
  ::google::protobuf::int32 index_id_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateIndexRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UpdateIndexRequest) */ {
 public:
  UpdateIndexRequest();
  virtual ~UpdateIndexRequest();

  UpdateIndexRequest(const UpdateIndexRequest& from);

  inline UpdateIndexRequest& operator=(const UpdateIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateIndexRequest(UpdateIndexRequest&& from) noexcept
    : UpdateIndexRequest() {
    *this = ::std::move(from);
  }

  inline UpdateIndexRequest& operator=(UpdateIndexRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateIndexRequest& default_instance();

  static inline const UpdateIndexRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateIndexRequest*>(
               &_UpdateIndexRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(UpdateIndexRequest* other);
  friend void swap(UpdateIndexRequest& a, UpdateIndexRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateIndexRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateIndexRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateIndexRequest& from);
  void MergeFrom(const UpdateIndexRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateIndexRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.StringValue mapping = 4;
  bool has_mapping() const;
  void clear_mapping();
  static const int kMappingFieldNumber = 4;
  const ::google::protobuf::StringValue& mapping() const;
  ::google::protobuf::StringValue* mutable_mapping();
  ::google::protobuf::StringValue* release_mapping();
  void set_allocated_mapping(::google::protobuf::StringValue* mapping);

  // .google.protobuf.StringValue setting = 5;
  bool has_setting() const;
  void clear_setting();
  static const int kSettingFieldNumber = 5;
  const ::google::protobuf::StringValue& setting() const;
  ::google::protobuf::StringValue* mutable_setting();
  ::google::protobuf::StringValue* release_setting();
  void set_allocated_setting(::google::protobuf::StringValue* setting);

  // int32 index_id = 1;
  void clear_index_id();
  static const int kIndexIdFieldNumber = 1;
  ::google::protobuf::int32 index_id() const;
  void set_index_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UpdateIndexRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::StringValue* mapping_;
  ::google::protobuf::StringValue* setting_;
  ::google::protobuf::int32 index_id_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateIndexReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UpdateIndexReply) */ {
 public:
  UpdateIndexReply();
  virtual ~UpdateIndexReply();

  UpdateIndexReply(const UpdateIndexReply& from);

  inline UpdateIndexReply& operator=(const UpdateIndexReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateIndexReply(UpdateIndexReply&& from) noexcept
    : UpdateIndexReply() {
    *this = ::std::move(from);
  }

  inline UpdateIndexReply& operator=(UpdateIndexReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateIndexReply& default_instance();

  static inline const UpdateIndexReply* internal_default_instance() {
    return reinterpret_cast<const UpdateIndexReply*>(
               &_UpdateIndexReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(UpdateIndexReply* other);
  friend void swap(UpdateIndexReply& a, UpdateIndexReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateIndexReply* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateIndexReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateIndexReply& from);
  void MergeFrom(const UpdateIndexReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateIndexReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UpdateIndexReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteIndexRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DeleteIndexRequest) */ {
 public:
  DeleteIndexRequest();
  virtual ~DeleteIndexRequest();

  DeleteIndexRequest(const DeleteIndexRequest& from);

  inline DeleteIndexRequest& operator=(const DeleteIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteIndexRequest(DeleteIndexRequest&& from) noexcept
    : DeleteIndexRequest() {
    *this = ::std::move(from);
  }

  inline DeleteIndexRequest& operator=(DeleteIndexRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteIndexRequest& default_instance();

  static inline const DeleteIndexRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteIndexRequest*>(
               &_DeleteIndexRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(DeleteIndexRequest* other);
  friend void swap(DeleteIndexRequest& a, DeleteIndexRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteIndexRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteIndexRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteIndexRequest& from);
  void MergeFrom(const DeleteIndexRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteIndexRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 index_id = 1;
  void clear_index_id();
  static const int kIndexIdFieldNumber = 1;
  ::google::protobuf::int32 index_id() const;
  void set_index_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DeleteIndexRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 index_id_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteIndexReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DeleteIndexReply) */ {
 public:
  DeleteIndexReply();
  virtual ~DeleteIndexReply();

  DeleteIndexReply(const DeleteIndexReply& from);

  inline DeleteIndexReply& operator=(const DeleteIndexReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteIndexReply(DeleteIndexReply&& from) noexcept
    : DeleteIndexReply() {
    *this = ::std::move(from);
  }

  inline DeleteIndexReply& operator=(DeleteIndexReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteIndexReply& default_instance();

  static inline const DeleteIndexReply* internal_default_instance() {
    return reinterpret_cast<const DeleteIndexReply*>(
               &_DeleteIndexReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(DeleteIndexReply* other);
  friend void swap(DeleteIndexReply& a, DeleteIndexReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteIndexReply* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteIndexReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteIndexReply& from);
  void MergeFrom(const DeleteIndexReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteIndexReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DeleteIndexReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListIndexRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ListIndexRequest) */ {
 public:
  ListIndexRequest();
  virtual ~ListIndexRequest();

  ListIndexRequest(const ListIndexRequest& from);

  inline ListIndexRequest& operator=(const ListIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListIndexRequest(ListIndexRequest&& from) noexcept
    : ListIndexRequest() {
    *this = ::std::move(from);
  }

  inline ListIndexRequest& operator=(ListIndexRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListIndexRequest& default_instance();

  static inline const ListIndexRequest* internal_default_instance() {
    return reinterpret_cast<const ListIndexRequest*>(
               &_ListIndexRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(ListIndexRequest* other);
  friend void swap(ListIndexRequest& a, ListIndexRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListIndexRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListIndexRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListIndexRequest& from);
  void MergeFrom(const ListIndexRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListIndexRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 cluster_id = 1;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 1;
  ::google::protobuf::int32 cluster_id() const;
  void set_cluster_id(::google::protobuf::int32 value);

  // int32 project_id = 2;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 2;
  ::google::protobuf::int32 project_id() const;
  void set_project_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ListIndexRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 cluster_id_;
  ::google::protobuf::int32 project_id_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListIndexReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ListIndexReply) */ {
 public:
  ListIndexReply();
  virtual ~ListIndexReply();

  ListIndexReply(const ListIndexReply& from);

  inline ListIndexReply& operator=(const ListIndexReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListIndexReply(ListIndexReply&& from) noexcept
    : ListIndexReply() {
    *this = ::std::move(from);
  }

  inline ListIndexReply& operator=(ListIndexReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListIndexReply& default_instance();

  static inline const ListIndexReply* internal_default_instance() {
    return reinterpret_cast<const ListIndexReply*>(
               &_ListIndexReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(ListIndexReply* other);
  friend void swap(ListIndexReply& a, ListIndexReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListIndexReply* New() const PROTOBUF_FINAL { return New(NULL); }

  ListIndexReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListIndexReply& from);
  void MergeFrom(const ListIndexReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListIndexReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IndexInfo indices = 3;
  int indices_size() const;
  void clear_indices();
  static const int kIndicesFieldNumber = 3;
  const ::IndexInfo& indices(int index) const;
  ::IndexInfo* mutable_indices(int index);
  ::IndexInfo* add_indices();
  ::google::protobuf::RepeatedPtrField< ::IndexInfo >*
      mutable_indices();
  const ::google::protobuf::RepeatedPtrField< ::IndexInfo >&
      indices() const;

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ListIndexReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::IndexInfo > indices_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fmeta_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateClusterRequest

// string name = 1;
inline void CreateClusterRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateClusterRequest::name() const {
  // @@protoc_insertion_point(field_get:CreateClusterRequest.name)
  return name_.GetNoArena();
}
inline void CreateClusterRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateClusterRequest.name)
}
#if LANG_CXX11
inline void CreateClusterRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateClusterRequest.name)
}
#endif
inline void CreateClusterRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateClusterRequest.name)
}
inline void CreateClusterRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateClusterRequest.name)
}
inline ::std::string* CreateClusterRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CreateClusterRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateClusterRequest::release_name() {
  // @@protoc_insertion_point(field_release:CreateClusterRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateClusterRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CreateClusterRequest.name)
}

// .ClusterType cluster = 2;
inline void CreateClusterRequest::clear_cluster() {
  cluster_ = 0;
}
inline ::ClusterType CreateClusterRequest::cluster() const {
  // @@protoc_insertion_point(field_get:CreateClusterRequest.cluster)
  return static_cast< ::ClusterType >(cluster_);
}
inline void CreateClusterRequest::set_cluster(::ClusterType value) {
  
  cluster_ = value;
  // @@protoc_insertion_point(field_set:CreateClusterRequest.cluster)
}

// string description = 3;
inline void CreateClusterRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateClusterRequest::description() const {
  // @@protoc_insertion_point(field_get:CreateClusterRequest.description)
  return description_.GetNoArena();
}
inline void CreateClusterRequest::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateClusterRequest.description)
}
#if LANG_CXX11
inline void CreateClusterRequest::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateClusterRequest.description)
}
#endif
inline void CreateClusterRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateClusterRequest.description)
}
inline void CreateClusterRequest::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateClusterRequest.description)
}
inline ::std::string* CreateClusterRequest::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:CreateClusterRequest.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateClusterRequest::release_description() {
  // @@protoc_insertion_point(field_release:CreateClusterRequest.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateClusterRequest::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:CreateClusterRequest.description)
}

// .ClusterStatus status = 4;
inline void CreateClusterRequest::clear_status() {
  status_ = 0;
}
inline ::ClusterStatus CreateClusterRequest::status() const {
  // @@protoc_insertion_point(field_get:CreateClusterRequest.status)
  return static_cast< ::ClusterStatus >(status_);
}
inline void CreateClusterRequest::set_status(::ClusterStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:CreateClusterRequest.status)
}

// string endpoint = 5;
inline void CreateClusterRequest::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateClusterRequest::endpoint() const {
  // @@protoc_insertion_point(field_get:CreateClusterRequest.endpoint)
  return endpoint_.GetNoArena();
}
inline void CreateClusterRequest::set_endpoint(const ::std::string& value) {
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateClusterRequest.endpoint)
}
#if LANG_CXX11
inline void CreateClusterRequest::set_endpoint(::std::string&& value) {
  
  endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateClusterRequest.endpoint)
}
#endif
inline void CreateClusterRequest::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateClusterRequest.endpoint)
}
inline void CreateClusterRequest::set_endpoint(const char* value, size_t size) {
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateClusterRequest.endpoint)
}
inline ::std::string* CreateClusterRequest::mutable_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:CreateClusterRequest.endpoint)
  return endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateClusterRequest::release_endpoint() {
  // @@protoc_insertion_point(field_release:CreateClusterRequest.endpoint)
  
  return endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateClusterRequest::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint != NULL) {
    
  } else {
    
  }
  endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:CreateClusterRequest.endpoint)
}

// string internal_endpoint = 6;
inline void CreateClusterRequest::clear_internal_endpoint() {
  internal_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateClusterRequest::internal_endpoint() const {
  // @@protoc_insertion_point(field_get:CreateClusterRequest.internal_endpoint)
  return internal_endpoint_.GetNoArena();
}
inline void CreateClusterRequest::set_internal_endpoint(const ::std::string& value) {
  
  internal_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateClusterRequest.internal_endpoint)
}
#if LANG_CXX11
inline void CreateClusterRequest::set_internal_endpoint(::std::string&& value) {
  
  internal_endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateClusterRequest.internal_endpoint)
}
#endif
inline void CreateClusterRequest::set_internal_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  internal_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateClusterRequest.internal_endpoint)
}
inline void CreateClusterRequest::set_internal_endpoint(const char* value, size_t size) {
  
  internal_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateClusterRequest.internal_endpoint)
}
inline ::std::string* CreateClusterRequest::mutable_internal_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:CreateClusterRequest.internal_endpoint)
  return internal_endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateClusterRequest::release_internal_endpoint() {
  // @@protoc_insertion_point(field_release:CreateClusterRequest.internal_endpoint)
  
  return internal_endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateClusterRequest::set_allocated_internal_endpoint(::std::string* internal_endpoint) {
  if (internal_endpoint != NULL) {
    
  } else {
    
  }
  internal_endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), internal_endpoint);
  // @@protoc_insertion_point(field_set_allocated:CreateClusterRequest.internal_endpoint)
}

// -------------------------------------------------------------------

// CreateClusterReply

// int32 code = 1;
inline void CreateClusterReply::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 CreateClusterReply::code() const {
  // @@protoc_insertion_point(field_get:CreateClusterReply.code)
  return code_;
}
inline void CreateClusterReply::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:CreateClusterReply.code)
}

// string message = 2;
inline void CreateClusterReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateClusterReply::message() const {
  // @@protoc_insertion_point(field_get:CreateClusterReply.message)
  return message_.GetNoArena();
}
inline void CreateClusterReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateClusterReply.message)
}
#if LANG_CXX11
inline void CreateClusterReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateClusterReply.message)
}
#endif
inline void CreateClusterReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateClusterReply.message)
}
inline void CreateClusterReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateClusterReply.message)
}
inline ::std::string* CreateClusterReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:CreateClusterReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateClusterReply::release_message() {
  // @@protoc_insertion_point(field_release:CreateClusterReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateClusterReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:CreateClusterReply.message)
}

// -------------------------------------------------------------------

// GetClusterInfoRequest

// string name = 1;
inline void GetClusterInfoRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetClusterInfoRequest::name() const {
  // @@protoc_insertion_point(field_get:GetClusterInfoRequest.name)
  return name_.GetNoArena();
}
inline void GetClusterInfoRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetClusterInfoRequest.name)
}
#if LANG_CXX11
inline void GetClusterInfoRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetClusterInfoRequest.name)
}
#endif
inline void GetClusterInfoRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetClusterInfoRequest.name)
}
inline void GetClusterInfoRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetClusterInfoRequest.name)
}
inline ::std::string* GetClusterInfoRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:GetClusterInfoRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetClusterInfoRequest::release_name() {
  // @@protoc_insertion_point(field_release:GetClusterInfoRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetClusterInfoRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:GetClusterInfoRequest.name)
}

// -------------------------------------------------------------------

// GetClusterInfoReply

// int32 code = 1;
inline void GetClusterInfoReply::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 GetClusterInfoReply::code() const {
  // @@protoc_insertion_point(field_get:GetClusterInfoReply.code)
  return code_;
}
inline void GetClusterInfoReply::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:GetClusterInfoReply.code)
}

// string message = 2;
inline void GetClusterInfoReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetClusterInfoReply::message() const {
  // @@protoc_insertion_point(field_get:GetClusterInfoReply.message)
  return message_.GetNoArena();
}
inline void GetClusterInfoReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetClusterInfoReply.message)
}
#if LANG_CXX11
inline void GetClusterInfoReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetClusterInfoReply.message)
}
#endif
inline void GetClusterInfoReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetClusterInfoReply.message)
}
inline void GetClusterInfoReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetClusterInfoReply.message)
}
inline ::std::string* GetClusterInfoReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:GetClusterInfoReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetClusterInfoReply::release_message() {
  // @@protoc_insertion_point(field_release:GetClusterInfoReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetClusterInfoReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:GetClusterInfoReply.message)
}

// .ClusterInfo cluster = 3;
inline bool GetClusterInfoReply::has_cluster() const {
  return this != internal_default_instance() && cluster_ != NULL;
}
inline void GetClusterInfoReply::clear_cluster() {
  if (GetArenaNoVirtual() == NULL && cluster_ != NULL) delete cluster_;
  cluster_ = NULL;
}
inline const ::ClusterInfo& GetClusterInfoReply::cluster() const {
  const ::ClusterInfo* p = cluster_;
  // @@protoc_insertion_point(field_get:GetClusterInfoReply.cluster)
  return p != NULL ? *p : *reinterpret_cast<const ::ClusterInfo*>(
      &::_ClusterInfo_default_instance_);
}
inline ::ClusterInfo* GetClusterInfoReply::mutable_cluster() {
  
  if (cluster_ == NULL) {
    cluster_ = new ::ClusterInfo;
  }
  // @@protoc_insertion_point(field_mutable:GetClusterInfoReply.cluster)
  return cluster_;
}
inline ::ClusterInfo* GetClusterInfoReply::release_cluster() {
  // @@protoc_insertion_point(field_release:GetClusterInfoReply.cluster)
  
  ::ClusterInfo* temp = cluster_;
  cluster_ = NULL;
  return temp;
}
inline void GetClusterInfoReply::set_allocated_cluster(::ClusterInfo* cluster) {
  delete cluster_;
  cluster_ = cluster;
  if (cluster) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GetClusterInfoReply.cluster)
}

// -------------------------------------------------------------------

// ClusterInfo

// int32 id = 1;
inline void ClusterInfo::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 ClusterInfo::id() const {
  // @@protoc_insertion_point(field_get:ClusterInfo.id)
  return id_;
}
inline void ClusterInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ClusterInfo.id)
}

// string name = 2;
inline void ClusterInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClusterInfo::name() const {
  // @@protoc_insertion_point(field_get:ClusterInfo.name)
  return name_.GetNoArena();
}
inline void ClusterInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClusterInfo.name)
}
#if LANG_CXX11
inline void ClusterInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClusterInfo.name)
}
#endif
inline void ClusterInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClusterInfo.name)
}
inline void ClusterInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClusterInfo.name)
}
inline ::std::string* ClusterInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ClusterInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterInfo::release_name() {
  // @@protoc_insertion_point(field_release:ClusterInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ClusterInfo.name)
}

// string endpoint = 3;
inline void ClusterInfo::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClusterInfo::endpoint() const {
  // @@protoc_insertion_point(field_get:ClusterInfo.endpoint)
  return endpoint_.GetNoArena();
}
inline void ClusterInfo::set_endpoint(const ::std::string& value) {
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClusterInfo.endpoint)
}
#if LANG_CXX11
inline void ClusterInfo::set_endpoint(::std::string&& value) {
  
  endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClusterInfo.endpoint)
}
#endif
inline void ClusterInfo::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClusterInfo.endpoint)
}
inline void ClusterInfo::set_endpoint(const char* value, size_t size) {
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClusterInfo.endpoint)
}
inline ::std::string* ClusterInfo::mutable_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:ClusterInfo.endpoint)
  return endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterInfo::release_endpoint() {
  // @@protoc_insertion_point(field_release:ClusterInfo.endpoint)
  
  return endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterInfo::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint != NULL) {
    
  } else {
    
  }
  endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:ClusterInfo.endpoint)
}

// string internal_endpoint = 4;
inline void ClusterInfo::clear_internal_endpoint() {
  internal_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClusterInfo::internal_endpoint() const {
  // @@protoc_insertion_point(field_get:ClusterInfo.internal_endpoint)
  return internal_endpoint_.GetNoArena();
}
inline void ClusterInfo::set_internal_endpoint(const ::std::string& value) {
  
  internal_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClusterInfo.internal_endpoint)
}
#if LANG_CXX11
inline void ClusterInfo::set_internal_endpoint(::std::string&& value) {
  
  internal_endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClusterInfo.internal_endpoint)
}
#endif
inline void ClusterInfo::set_internal_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  internal_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClusterInfo.internal_endpoint)
}
inline void ClusterInfo::set_internal_endpoint(const char* value, size_t size) {
  
  internal_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClusterInfo.internal_endpoint)
}
inline ::std::string* ClusterInfo::mutable_internal_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:ClusterInfo.internal_endpoint)
  return internal_endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterInfo::release_internal_endpoint() {
  // @@protoc_insertion_point(field_release:ClusterInfo.internal_endpoint)
  
  return internal_endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterInfo::set_allocated_internal_endpoint(::std::string* internal_endpoint) {
  if (internal_endpoint != NULL) {
    
  } else {
    
  }
  internal_endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), internal_endpoint);
  // @@protoc_insertion_point(field_set_allocated:ClusterInfo.internal_endpoint)
}

// .ClusterType type = 5;
inline void ClusterInfo::clear_type() {
  type_ = 0;
}
inline ::ClusterType ClusterInfo::type() const {
  // @@protoc_insertion_point(field_get:ClusterInfo.type)
  return static_cast< ::ClusterType >(type_);
}
inline void ClusterInfo::set_type(::ClusterType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ClusterInfo.type)
}

// string description = 6;
inline void ClusterInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClusterInfo::description() const {
  // @@protoc_insertion_point(field_get:ClusterInfo.description)
  return description_.GetNoArena();
}
inline void ClusterInfo::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClusterInfo.description)
}
#if LANG_CXX11
inline void ClusterInfo::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClusterInfo.description)
}
#endif
inline void ClusterInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClusterInfo.description)
}
inline void ClusterInfo::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClusterInfo.description)
}
inline ::std::string* ClusterInfo::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:ClusterInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterInfo::release_description() {
  // @@protoc_insertion_point(field_release:ClusterInfo.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ClusterInfo.description)
}

// int64 create_time = 7;
inline void ClusterInfo::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ClusterInfo::create_time() const {
  // @@protoc_insertion_point(field_get:ClusterInfo.create_time)
  return create_time_;
}
inline void ClusterInfo::set_create_time(::google::protobuf::int64 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:ClusterInfo.create_time)
}

// int64 last_update_time = 8;
inline void ClusterInfo::clear_last_update_time() {
  last_update_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ClusterInfo::last_update_time() const {
  // @@protoc_insertion_point(field_get:ClusterInfo.last_update_time)
  return last_update_time_;
}
inline void ClusterInfo::set_last_update_time(::google::protobuf::int64 value) {
  
  last_update_time_ = value;
  // @@protoc_insertion_point(field_set:ClusterInfo.last_update_time)
}

// .ClusterStatus status = 9;
inline void ClusterInfo::clear_status() {
  status_ = 0;
}
inline ::ClusterStatus ClusterInfo::status() const {
  // @@protoc_insertion_point(field_get:ClusterInfo.status)
  return static_cast< ::ClusterStatus >(status_);
}
inline void ClusterInfo::set_status(::ClusterStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ClusterInfo.status)
}

// string es_version = 10;
inline void ClusterInfo::clear_es_version() {
  es_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClusterInfo::es_version() const {
  // @@protoc_insertion_point(field_get:ClusterInfo.es_version)
  return es_version_.GetNoArena();
}
inline void ClusterInfo::set_es_version(const ::std::string& value) {
  
  es_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClusterInfo.es_version)
}
#if LANG_CXX11
inline void ClusterInfo::set_es_version(::std::string&& value) {
  
  es_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClusterInfo.es_version)
}
#endif
inline void ClusterInfo::set_es_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  es_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClusterInfo.es_version)
}
inline void ClusterInfo::set_es_version(const char* value, size_t size) {
  
  es_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClusterInfo.es_version)
}
inline ::std::string* ClusterInfo::mutable_es_version() {
  
  // @@protoc_insertion_point(field_mutable:ClusterInfo.es_version)
  return es_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterInfo::release_es_version() {
  // @@protoc_insertion_point(field_release:ClusterInfo.es_version)
  
  return es_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterInfo::set_allocated_es_version(::std::string* es_version) {
  if (es_version != NULL) {
    
  } else {
    
  }
  es_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), es_version);
  // @@protoc_insertion_point(field_set_allocated:ClusterInfo.es_version)
}

// int32 total_project_number = 11;
inline void ClusterInfo::clear_total_project_number() {
  total_project_number_ = 0;
}
inline ::google::protobuf::int32 ClusterInfo::total_project_number() const {
  // @@protoc_insertion_point(field_get:ClusterInfo.total_project_number)
  return total_project_number_;
}
inline void ClusterInfo::set_total_project_number(::google::protobuf::int32 value) {
  
  total_project_number_ = value;
  // @@protoc_insertion_point(field_set:ClusterInfo.total_project_number)
}

// int32 total_index_number = 12;
inline void ClusterInfo::clear_total_index_number() {
  total_index_number_ = 0;
}
inline ::google::protobuf::int32 ClusterInfo::total_index_number() const {
  // @@protoc_insertion_point(field_get:ClusterInfo.total_index_number)
  return total_index_number_;
}
inline void ClusterInfo::set_total_index_number(::google::protobuf::int32 value) {
  
  total_index_number_ = value;
  // @@protoc_insertion_point(field_set:ClusterInfo.total_index_number)
}

// int64 total_doc_number = 13;
inline void ClusterInfo::clear_total_doc_number() {
  total_doc_number_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ClusterInfo::total_doc_number() const {
  // @@protoc_insertion_point(field_get:ClusterInfo.total_doc_number)
  return total_doc_number_;
}
inline void ClusterInfo::set_total_doc_number(::google::protobuf::int64 value) {
  
  total_doc_number_ = value;
  // @@protoc_insertion_point(field_set:ClusterInfo.total_doc_number)
}

// int64 total_data_size = 14;
inline void ClusterInfo::clear_total_data_size() {
  total_data_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ClusterInfo::total_data_size() const {
  // @@protoc_insertion_point(field_get:ClusterInfo.total_data_size)
  return total_data_size_;
}
inline void ClusterInfo::set_total_data_size(::google::protobuf::int64 value) {
  
  total_data_size_ = value;
  // @@protoc_insertion_point(field_set:ClusterInfo.total_data_size)
}

// string cluster_health = 15;
inline void ClusterInfo::clear_cluster_health() {
  cluster_health_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClusterInfo::cluster_health() const {
  // @@protoc_insertion_point(field_get:ClusterInfo.cluster_health)
  return cluster_health_.GetNoArena();
}
inline void ClusterInfo::set_cluster_health(const ::std::string& value) {
  
  cluster_health_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClusterInfo.cluster_health)
}
#if LANG_CXX11
inline void ClusterInfo::set_cluster_health(::std::string&& value) {
  
  cluster_health_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClusterInfo.cluster_health)
}
#endif
inline void ClusterInfo::set_cluster_health(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_health_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClusterInfo.cluster_health)
}
inline void ClusterInfo::set_cluster_health(const char* value, size_t size) {
  
  cluster_health_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClusterInfo.cluster_health)
}
inline ::std::string* ClusterInfo::mutable_cluster_health() {
  
  // @@protoc_insertion_point(field_mutable:ClusterInfo.cluster_health)
  return cluster_health_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterInfo::release_cluster_health() {
  // @@protoc_insertion_point(field_release:ClusterInfo.cluster_health)
  
  return cluster_health_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterInfo::set_allocated_cluster_health(::std::string* cluster_health) {
  if (cluster_health != NULL) {
    
  } else {
    
  }
  cluster_health_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_health);
  // @@protoc_insertion_point(field_set_allocated:ClusterInfo.cluster_health)
}

// repeated .NodeInfo nodes = 16;
inline int ClusterInfo::nodes_size() const {
  return nodes_.size();
}
inline void ClusterInfo::clear_nodes() {
  nodes_.Clear();
}
inline const ::NodeInfo& ClusterInfo::nodes(int index) const {
  // @@protoc_insertion_point(field_get:ClusterInfo.nodes)
  return nodes_.Get(index);
}
inline ::NodeInfo* ClusterInfo::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:ClusterInfo.nodes)
  return nodes_.Mutable(index);
}
inline ::NodeInfo* ClusterInfo::add_nodes() {
  // @@protoc_insertion_point(field_add:ClusterInfo.nodes)
  return nodes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::NodeInfo >*
ClusterInfo::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:ClusterInfo.nodes)
  return &nodes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::NodeInfo >&
ClusterInfo::nodes() const {
  // @@protoc_insertion_point(field_list:ClusterInfo.nodes)
  return nodes_;
}

// int32 total_template_number = 17;
inline void ClusterInfo::clear_total_template_number() {
  total_template_number_ = 0;
}
inline ::google::protobuf::int32 ClusterInfo::total_template_number() const {
  // @@protoc_insertion_point(field_get:ClusterInfo.total_template_number)
  return total_template_number_;
}
inline void ClusterInfo::set_total_template_number(::google::protobuf::int32 value) {
  
  total_template_number_ = value;
  // @@protoc_insertion_point(field_set:ClusterInfo.total_template_number)
}

// -------------------------------------------------------------------

// NodeInfo

// int32 id = 1;
inline void NodeInfo::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 NodeInfo::id() const {
  // @@protoc_insertion_point(field_get:NodeInfo.id)
  return id_;
}
inline void NodeInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NodeInfo.id)
}

// string name = 2;
inline void NodeInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeInfo::name() const {
  // @@protoc_insertion_point(field_get:NodeInfo.name)
  return name_.GetNoArena();
}
inline void NodeInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NodeInfo.name)
}
#if LANG_CXX11
inline void NodeInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeInfo.name)
}
#endif
inline void NodeInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeInfo.name)
}
inline void NodeInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeInfo.name)
}
inline ::std::string* NodeInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NodeInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeInfo::release_name() {
  // @@protoc_insertion_point(field_release:NodeInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NodeInfo.name)
}

// string ip_address = 3;
inline void NodeInfo::clear_ip_address() {
  ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeInfo::ip_address() const {
  // @@protoc_insertion_point(field_get:NodeInfo.ip_address)
  return ip_address_.GetNoArena();
}
inline void NodeInfo::set_ip_address(const ::std::string& value) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NodeInfo.ip_address)
}
#if LANG_CXX11
inline void NodeInfo::set_ip_address(::std::string&& value) {
  
  ip_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeInfo.ip_address)
}
#endif
inline void NodeInfo::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeInfo.ip_address)
}
inline void NodeInfo::set_ip_address(const char* value, size_t size) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeInfo.ip_address)
}
inline ::std::string* NodeInfo::mutable_ip_address() {
  
  // @@protoc_insertion_point(field_mutable:NodeInfo.ip_address)
  return ip_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeInfo::release_ip_address() {
  // @@protoc_insertion_point(field_release:NodeInfo.ip_address)
  
  return ip_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_ip_address(::std::string* ip_address) {
  if (ip_address != NULL) {
    
  } else {
    
  }
  ip_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_address);
  // @@protoc_insertion_point(field_set_allocated:NodeInfo.ip_address)
}

// bool is_master = 4;
inline void NodeInfo::clear_is_master() {
  is_master_ = false;
}
inline bool NodeInfo::is_master() const {
  // @@protoc_insertion_point(field_get:NodeInfo.is_master)
  return is_master_;
}
inline void NodeInfo::set_is_master(bool value) {
  
  is_master_ = value;
  // @@protoc_insertion_point(field_set:NodeInfo.is_master)
}

// double cpu_percent = 5;
inline void NodeInfo::clear_cpu_percent() {
  cpu_percent_ = 0;
}
inline double NodeInfo::cpu_percent() const {
  // @@protoc_insertion_point(field_get:NodeInfo.cpu_percent)
  return cpu_percent_;
}
inline void NodeInfo::set_cpu_percent(double value) {
  
  cpu_percent_ = value;
  // @@protoc_insertion_point(field_set:NodeInfo.cpu_percent)
}

// string ram_max = 6;
inline void NodeInfo::clear_ram_max() {
  ram_max_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeInfo::ram_max() const {
  // @@protoc_insertion_point(field_get:NodeInfo.ram_max)
  return ram_max_.GetNoArena();
}
inline void NodeInfo::set_ram_max(const ::std::string& value) {
  
  ram_max_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NodeInfo.ram_max)
}
#if LANG_CXX11
inline void NodeInfo::set_ram_max(::std::string&& value) {
  
  ram_max_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeInfo.ram_max)
}
#endif
inline void NodeInfo::set_ram_max(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ram_max_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeInfo.ram_max)
}
inline void NodeInfo::set_ram_max(const char* value, size_t size) {
  
  ram_max_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeInfo.ram_max)
}
inline ::std::string* NodeInfo::mutable_ram_max() {
  
  // @@protoc_insertion_point(field_mutable:NodeInfo.ram_max)
  return ram_max_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeInfo::release_ram_max() {
  // @@protoc_insertion_point(field_release:NodeInfo.ram_max)
  
  return ram_max_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_ram_max(::std::string* ram_max) {
  if (ram_max != NULL) {
    
  } else {
    
  }
  ram_max_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ram_max);
  // @@protoc_insertion_point(field_set_allocated:NodeInfo.ram_max)
}

// string ram_current = 7;
inline void NodeInfo::clear_ram_current() {
  ram_current_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeInfo::ram_current() const {
  // @@protoc_insertion_point(field_get:NodeInfo.ram_current)
  return ram_current_.GetNoArena();
}
inline void NodeInfo::set_ram_current(const ::std::string& value) {
  
  ram_current_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NodeInfo.ram_current)
}
#if LANG_CXX11
inline void NodeInfo::set_ram_current(::std::string&& value) {
  
  ram_current_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeInfo.ram_current)
}
#endif
inline void NodeInfo::set_ram_current(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ram_current_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeInfo.ram_current)
}
inline void NodeInfo::set_ram_current(const char* value, size_t size) {
  
  ram_current_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeInfo.ram_current)
}
inline ::std::string* NodeInfo::mutable_ram_current() {
  
  // @@protoc_insertion_point(field_mutable:NodeInfo.ram_current)
  return ram_current_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeInfo::release_ram_current() {
  // @@protoc_insertion_point(field_release:NodeInfo.ram_current)
  
  return ram_current_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_ram_current(::std::string* ram_current) {
  if (ram_current != NULL) {
    
  } else {
    
  }
  ram_current_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ram_current);
  // @@protoc_insertion_point(field_set_allocated:NodeInfo.ram_current)
}

// string heap_max = 8;
inline void NodeInfo::clear_heap_max() {
  heap_max_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeInfo::heap_max() const {
  // @@protoc_insertion_point(field_get:NodeInfo.heap_max)
  return heap_max_.GetNoArena();
}
inline void NodeInfo::set_heap_max(const ::std::string& value) {
  
  heap_max_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NodeInfo.heap_max)
}
#if LANG_CXX11
inline void NodeInfo::set_heap_max(::std::string&& value) {
  
  heap_max_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeInfo.heap_max)
}
#endif
inline void NodeInfo::set_heap_max(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  heap_max_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeInfo.heap_max)
}
inline void NodeInfo::set_heap_max(const char* value, size_t size) {
  
  heap_max_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeInfo.heap_max)
}
inline ::std::string* NodeInfo::mutable_heap_max() {
  
  // @@protoc_insertion_point(field_mutable:NodeInfo.heap_max)
  return heap_max_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeInfo::release_heap_max() {
  // @@protoc_insertion_point(field_release:NodeInfo.heap_max)
  
  return heap_max_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_heap_max(::std::string* heap_max) {
  if (heap_max != NULL) {
    
  } else {
    
  }
  heap_max_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), heap_max);
  // @@protoc_insertion_point(field_set_allocated:NodeInfo.heap_max)
}

// string heap_current = 9;
inline void NodeInfo::clear_heap_current() {
  heap_current_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeInfo::heap_current() const {
  // @@protoc_insertion_point(field_get:NodeInfo.heap_current)
  return heap_current_.GetNoArena();
}
inline void NodeInfo::set_heap_current(const ::std::string& value) {
  
  heap_current_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NodeInfo.heap_current)
}
#if LANG_CXX11
inline void NodeInfo::set_heap_current(::std::string&& value) {
  
  heap_current_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeInfo.heap_current)
}
#endif
inline void NodeInfo::set_heap_current(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  heap_current_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeInfo.heap_current)
}
inline void NodeInfo::set_heap_current(const char* value, size_t size) {
  
  heap_current_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeInfo.heap_current)
}
inline ::std::string* NodeInfo::mutable_heap_current() {
  
  // @@protoc_insertion_point(field_mutable:NodeInfo.heap_current)
  return heap_current_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeInfo::release_heap_current() {
  // @@protoc_insertion_point(field_release:NodeInfo.heap_current)
  
  return heap_current_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_heap_current(::std::string* heap_current) {
  if (heap_current != NULL) {
    
  } else {
    
  }
  heap_current_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), heap_current);
  // @@protoc_insertion_point(field_set_allocated:NodeInfo.heap_current)
}

// string disk_avail = 10;
inline void NodeInfo::clear_disk_avail() {
  disk_avail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeInfo::disk_avail() const {
  // @@protoc_insertion_point(field_get:NodeInfo.disk_avail)
  return disk_avail_.GetNoArena();
}
inline void NodeInfo::set_disk_avail(const ::std::string& value) {
  
  disk_avail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NodeInfo.disk_avail)
}
#if LANG_CXX11
inline void NodeInfo::set_disk_avail(::std::string&& value) {
  
  disk_avail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeInfo.disk_avail)
}
#endif
inline void NodeInfo::set_disk_avail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  disk_avail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeInfo.disk_avail)
}
inline void NodeInfo::set_disk_avail(const char* value, size_t size) {
  
  disk_avail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeInfo.disk_avail)
}
inline ::std::string* NodeInfo::mutable_disk_avail() {
  
  // @@protoc_insertion_point(field_mutable:NodeInfo.disk_avail)
  return disk_avail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeInfo::release_disk_avail() {
  // @@protoc_insertion_point(field_release:NodeInfo.disk_avail)
  
  return disk_avail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_disk_avail(::std::string* disk_avail) {
  if (disk_avail != NULL) {
    
  } else {
    
  }
  disk_avail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), disk_avail);
  // @@protoc_insertion_point(field_set_allocated:NodeInfo.disk_avail)
}

// double disk_percent = 11;
inline void NodeInfo::clear_disk_percent() {
  disk_percent_ = 0;
}
inline double NodeInfo::disk_percent() const {
  // @@protoc_insertion_point(field_get:NodeInfo.disk_percent)
  return disk_percent_;
}
inline void NodeInfo::set_disk_percent(double value) {
  
  disk_percent_ = value;
  // @@protoc_insertion_point(field_set:NodeInfo.disk_percent)
}

// string group = 12;
inline void NodeInfo::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeInfo::group() const {
  // @@protoc_insertion_point(field_get:NodeInfo.group)
  return group_.GetNoArena();
}
inline void NodeInfo::set_group(const ::std::string& value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NodeInfo.group)
}
#if LANG_CXX11
inline void NodeInfo::set_group(::std::string&& value) {
  
  group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeInfo.group)
}
#endif
inline void NodeInfo::set_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeInfo.group)
}
inline void NodeInfo::set_group(const char* value, size_t size) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeInfo.group)
}
inline ::std::string* NodeInfo::mutable_group() {
  
  // @@protoc_insertion_point(field_mutable:NodeInfo.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeInfo::release_group() {
  // @@protoc_insertion_point(field_release:NodeInfo.group)
  
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_group(::std::string* group) {
  if (group != NULL) {
    
  } else {
    
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:NodeInfo.group)
}

// string tag = 13;
inline void NodeInfo::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeInfo::tag() const {
  // @@protoc_insertion_point(field_get:NodeInfo.tag)
  return tag_.GetNoArena();
}
inline void NodeInfo::set_tag(const ::std::string& value) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NodeInfo.tag)
}
#if LANG_CXX11
inline void NodeInfo::set_tag(::std::string&& value) {
  
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeInfo.tag)
}
#endif
inline void NodeInfo::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeInfo.tag)
}
inline void NodeInfo::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeInfo.tag)
}
inline ::std::string* NodeInfo::mutable_tag() {
  
  // @@protoc_insertion_point(field_mutable:NodeInfo.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeInfo::release_tag() {
  // @@protoc_insertion_point(field_release:NodeInfo.tag)
  
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:NodeInfo.tag)
}

// -------------------------------------------------------------------

// UpdateClusterInfoRequest

// int32 id = 1;
inline void UpdateClusterInfoRequest::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 UpdateClusterInfoRequest::id() const {
  // @@protoc_insertion_point(field_get:UpdateClusterInfoRequest.id)
  return id_;
}
inline void UpdateClusterInfoRequest::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:UpdateClusterInfoRequest.id)
}

// string name = 2;
inline void UpdateClusterInfoRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateClusterInfoRequest::name() const {
  // @@protoc_insertion_point(field_get:UpdateClusterInfoRequest.name)
  return name_.GetNoArena();
}
inline void UpdateClusterInfoRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UpdateClusterInfoRequest.name)
}
#if LANG_CXX11
inline void UpdateClusterInfoRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UpdateClusterInfoRequest.name)
}
#endif
inline void UpdateClusterInfoRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UpdateClusterInfoRequest.name)
}
inline void UpdateClusterInfoRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UpdateClusterInfoRequest.name)
}
inline ::std::string* UpdateClusterInfoRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:UpdateClusterInfoRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateClusterInfoRequest::release_name() {
  // @@protoc_insertion_point(field_release:UpdateClusterInfoRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateClusterInfoRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:UpdateClusterInfoRequest.name)
}

// .ClusterStatus status = 3;
inline void UpdateClusterInfoRequest::clear_status() {
  status_ = 0;
}
inline ::ClusterStatus UpdateClusterInfoRequest::status() const {
  // @@protoc_insertion_point(field_get:UpdateClusterInfoRequest.status)
  return static_cast< ::ClusterStatus >(status_);
}
inline void UpdateClusterInfoRequest::set_status(::ClusterStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:UpdateClusterInfoRequest.status)
}

// string description = 4;
inline void UpdateClusterInfoRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateClusterInfoRequest::description() const {
  // @@protoc_insertion_point(field_get:UpdateClusterInfoRequest.description)
  return description_.GetNoArena();
}
inline void UpdateClusterInfoRequest::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UpdateClusterInfoRequest.description)
}
#if LANG_CXX11
inline void UpdateClusterInfoRequest::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UpdateClusterInfoRequest.description)
}
#endif
inline void UpdateClusterInfoRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UpdateClusterInfoRequest.description)
}
inline void UpdateClusterInfoRequest::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UpdateClusterInfoRequest.description)
}
inline ::std::string* UpdateClusterInfoRequest::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:UpdateClusterInfoRequest.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateClusterInfoRequest::release_description() {
  // @@protoc_insertion_point(field_release:UpdateClusterInfoRequest.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateClusterInfoRequest::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:UpdateClusterInfoRequest.description)
}

// string internal_endpoint = 5;
inline void UpdateClusterInfoRequest::clear_internal_endpoint() {
  internal_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateClusterInfoRequest::internal_endpoint() const {
  // @@protoc_insertion_point(field_get:UpdateClusterInfoRequest.internal_endpoint)
  return internal_endpoint_.GetNoArena();
}
inline void UpdateClusterInfoRequest::set_internal_endpoint(const ::std::string& value) {
  
  internal_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UpdateClusterInfoRequest.internal_endpoint)
}
#if LANG_CXX11
inline void UpdateClusterInfoRequest::set_internal_endpoint(::std::string&& value) {
  
  internal_endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UpdateClusterInfoRequest.internal_endpoint)
}
#endif
inline void UpdateClusterInfoRequest::set_internal_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  internal_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UpdateClusterInfoRequest.internal_endpoint)
}
inline void UpdateClusterInfoRequest::set_internal_endpoint(const char* value, size_t size) {
  
  internal_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UpdateClusterInfoRequest.internal_endpoint)
}
inline ::std::string* UpdateClusterInfoRequest::mutable_internal_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:UpdateClusterInfoRequest.internal_endpoint)
  return internal_endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateClusterInfoRequest::release_internal_endpoint() {
  // @@protoc_insertion_point(field_release:UpdateClusterInfoRequest.internal_endpoint)
  
  return internal_endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateClusterInfoRequest::set_allocated_internal_endpoint(::std::string* internal_endpoint) {
  if (internal_endpoint != NULL) {
    
  } else {
    
  }
  internal_endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), internal_endpoint);
  // @@protoc_insertion_point(field_set_allocated:UpdateClusterInfoRequest.internal_endpoint)
}

// -------------------------------------------------------------------

// UpdateClusterInfoReply

// int32 code = 1;
inline void UpdateClusterInfoReply::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 UpdateClusterInfoReply::code() const {
  // @@protoc_insertion_point(field_get:UpdateClusterInfoReply.code)
  return code_;
}
inline void UpdateClusterInfoReply::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:UpdateClusterInfoReply.code)
}

// string message = 2;
inline void UpdateClusterInfoReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateClusterInfoReply::message() const {
  // @@protoc_insertion_point(field_get:UpdateClusterInfoReply.message)
  return message_.GetNoArena();
}
inline void UpdateClusterInfoReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UpdateClusterInfoReply.message)
}
#if LANG_CXX11
inline void UpdateClusterInfoReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UpdateClusterInfoReply.message)
}
#endif
inline void UpdateClusterInfoReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UpdateClusterInfoReply.message)
}
inline void UpdateClusterInfoReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UpdateClusterInfoReply.message)
}
inline ::std::string* UpdateClusterInfoReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:UpdateClusterInfoReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateClusterInfoReply::release_message() {
  // @@protoc_insertion_point(field_release:UpdateClusterInfoReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateClusterInfoReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:UpdateClusterInfoReply.message)
}

// -------------------------------------------------------------------

// DeleteClusterRequest

// string name = 1;
inline void DeleteClusterRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteClusterRequest::name() const {
  // @@protoc_insertion_point(field_get:DeleteClusterRequest.name)
  return name_.GetNoArena();
}
inline void DeleteClusterRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeleteClusterRequest.name)
}
#if LANG_CXX11
inline void DeleteClusterRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeleteClusterRequest.name)
}
#endif
inline void DeleteClusterRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeleteClusterRequest.name)
}
inline void DeleteClusterRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeleteClusterRequest.name)
}
inline ::std::string* DeleteClusterRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:DeleteClusterRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteClusterRequest::release_name() {
  // @@protoc_insertion_point(field_release:DeleteClusterRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteClusterRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:DeleteClusterRequest.name)
}

// -------------------------------------------------------------------

// DeleteClusterReply

// int32 code = 1;
inline void DeleteClusterReply::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 DeleteClusterReply::code() const {
  // @@protoc_insertion_point(field_get:DeleteClusterReply.code)
  return code_;
}
inline void DeleteClusterReply::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:DeleteClusterReply.code)
}

// string message = 2;
inline void DeleteClusterReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteClusterReply::message() const {
  // @@protoc_insertion_point(field_get:DeleteClusterReply.message)
  return message_.GetNoArena();
}
inline void DeleteClusterReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeleteClusterReply.message)
}
#if LANG_CXX11
inline void DeleteClusterReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeleteClusterReply.message)
}
#endif
inline void DeleteClusterReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeleteClusterReply.message)
}
inline void DeleteClusterReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeleteClusterReply.message)
}
inline ::std::string* DeleteClusterReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:DeleteClusterReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteClusterReply::release_message() {
  // @@protoc_insertion_point(field_release:DeleteClusterReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteClusterReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:DeleteClusterReply.message)
}

// -------------------------------------------------------------------

// ListClusterRequest

// -------------------------------------------------------------------

// ListClusterReply

// int32 code = 1;
inline void ListClusterReply::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 ListClusterReply::code() const {
  // @@protoc_insertion_point(field_get:ListClusterReply.code)
  return code_;
}
inline void ListClusterReply::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:ListClusterReply.code)
}

// string message = 2;
inline void ListClusterReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListClusterReply::message() const {
  // @@protoc_insertion_point(field_get:ListClusterReply.message)
  return message_.GetNoArena();
}
inline void ListClusterReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ListClusterReply.message)
}
#if LANG_CXX11
inline void ListClusterReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ListClusterReply.message)
}
#endif
inline void ListClusterReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ListClusterReply.message)
}
inline void ListClusterReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ListClusterReply.message)
}
inline ::std::string* ListClusterReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ListClusterReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListClusterReply::release_message() {
  // @@protoc_insertion_point(field_release:ListClusterReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListClusterReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ListClusterReply.message)
}

// repeated string clusters = 3;
inline int ListClusterReply::clusters_size() const {
  return clusters_.size();
}
inline void ListClusterReply::clear_clusters() {
  clusters_.Clear();
}
inline const ::std::string& ListClusterReply::clusters(int index) const {
  // @@protoc_insertion_point(field_get:ListClusterReply.clusters)
  return clusters_.Get(index);
}
inline ::std::string* ListClusterReply::mutable_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:ListClusterReply.clusters)
  return clusters_.Mutable(index);
}
inline void ListClusterReply::set_clusters(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ListClusterReply.clusters)
  clusters_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ListClusterReply::set_clusters(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ListClusterReply.clusters)
  clusters_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ListClusterReply::set_clusters(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  clusters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ListClusterReply.clusters)
}
inline void ListClusterReply::set_clusters(int index, const char* value, size_t size) {
  clusters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ListClusterReply.clusters)
}
inline ::std::string* ListClusterReply::add_clusters() {
  // @@protoc_insertion_point(field_add_mutable:ListClusterReply.clusters)
  return clusters_.Add();
}
inline void ListClusterReply::add_clusters(const ::std::string& value) {
  clusters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ListClusterReply.clusters)
}
#if LANG_CXX11
inline void ListClusterReply::add_clusters(::std::string&& value) {
  clusters_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ListClusterReply.clusters)
}
#endif
inline void ListClusterReply::add_clusters(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  clusters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ListClusterReply.clusters)
}
inline void ListClusterReply::add_clusters(const char* value, size_t size) {
  clusters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ListClusterReply.clusters)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListClusterReply::clusters() const {
  // @@protoc_insertion_point(field_list:ListClusterReply.clusters)
  return clusters_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ListClusterReply::mutable_clusters() {
  // @@protoc_insertion_point(field_mutable_list:ListClusterReply.clusters)
  return &clusters_;
}

// -------------------------------------------------------------------

// ListClusterDetailsRequest

// -------------------------------------------------------------------

// ListClusterDetailsReply

// int32 code = 1;
inline void ListClusterDetailsReply::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 ListClusterDetailsReply::code() const {
  // @@protoc_insertion_point(field_get:ListClusterDetailsReply.code)
  return code_;
}
inline void ListClusterDetailsReply::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:ListClusterDetailsReply.code)
}

// string message = 2;
inline void ListClusterDetailsReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListClusterDetailsReply::message() const {
  // @@protoc_insertion_point(field_get:ListClusterDetailsReply.message)
  return message_.GetNoArena();
}
inline void ListClusterDetailsReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ListClusterDetailsReply.message)
}
#if LANG_CXX11
inline void ListClusterDetailsReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ListClusterDetailsReply.message)
}
#endif
inline void ListClusterDetailsReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ListClusterDetailsReply.message)
}
inline void ListClusterDetailsReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ListClusterDetailsReply.message)
}
inline ::std::string* ListClusterDetailsReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ListClusterDetailsReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListClusterDetailsReply::release_message() {
  // @@protoc_insertion_point(field_release:ListClusterDetailsReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListClusterDetailsReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ListClusterDetailsReply.message)
}

// repeated .ClusterInfo clusters = 3;
inline int ListClusterDetailsReply::clusters_size() const {
  return clusters_.size();
}
inline void ListClusterDetailsReply::clear_clusters() {
  clusters_.Clear();
}
inline const ::ClusterInfo& ListClusterDetailsReply::clusters(int index) const {
  // @@protoc_insertion_point(field_get:ListClusterDetailsReply.clusters)
  return clusters_.Get(index);
}
inline ::ClusterInfo* ListClusterDetailsReply::mutable_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:ListClusterDetailsReply.clusters)
  return clusters_.Mutable(index);
}
inline ::ClusterInfo* ListClusterDetailsReply::add_clusters() {
  // @@protoc_insertion_point(field_add:ListClusterDetailsReply.clusters)
  return clusters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ClusterInfo >*
ListClusterDetailsReply::mutable_clusters() {
  // @@protoc_insertion_point(field_mutable_list:ListClusterDetailsReply.clusters)
  return &clusters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ClusterInfo >&
ListClusterDetailsReply::clusters() const {
  // @@protoc_insertion_point(field_list:ListClusterDetailsReply.clusters)
  return clusters_;
}

// -------------------------------------------------------------------

// CreateProjectRequest

// string name = 1;
inline void CreateProjectRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateProjectRequest::name() const {
  // @@protoc_insertion_point(field_get:CreateProjectRequest.name)
  return name_.GetNoArena();
}
inline void CreateProjectRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateProjectRequest.name)
}
#if LANG_CXX11
inline void CreateProjectRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateProjectRequest.name)
}
#endif
inline void CreateProjectRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateProjectRequest.name)
}
inline void CreateProjectRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateProjectRequest.name)
}
inline ::std::string* CreateProjectRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CreateProjectRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateProjectRequest::release_name() {
  // @@protoc_insertion_point(field_release:CreateProjectRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateProjectRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CreateProjectRequest.name)
}

// string cluster = 2;
inline void CreateProjectRequest::clear_cluster() {
  cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateProjectRequest::cluster() const {
  // @@protoc_insertion_point(field_get:CreateProjectRequest.cluster)
  return cluster_.GetNoArena();
}
inline void CreateProjectRequest::set_cluster(const ::std::string& value) {
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateProjectRequest.cluster)
}
#if LANG_CXX11
inline void CreateProjectRequest::set_cluster(::std::string&& value) {
  
  cluster_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateProjectRequest.cluster)
}
#endif
inline void CreateProjectRequest::set_cluster(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateProjectRequest.cluster)
}
inline void CreateProjectRequest::set_cluster(const char* value, size_t size) {
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateProjectRequest.cluster)
}
inline ::std::string* CreateProjectRequest::mutable_cluster() {
  
  // @@protoc_insertion_point(field_mutable:CreateProjectRequest.cluster)
  return cluster_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateProjectRequest::release_cluster() {
  // @@protoc_insertion_point(field_release:CreateProjectRequest.cluster)
  
  return cluster_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateProjectRequest::set_allocated_cluster(::std::string* cluster) {
  if (cluster != NULL) {
    
  } else {
    
  }
  cluster_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster);
  // @@protoc_insertion_point(field_set_allocated:CreateProjectRequest.cluster)
}

// string description = 3;
inline void CreateProjectRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateProjectRequest::description() const {
  // @@protoc_insertion_point(field_get:CreateProjectRequest.description)
  return description_.GetNoArena();
}
inline void CreateProjectRequest::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateProjectRequest.description)
}
#if LANG_CXX11
inline void CreateProjectRequest::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateProjectRequest.description)
}
#endif
inline void CreateProjectRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateProjectRequest.description)
}
inline void CreateProjectRequest::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateProjectRequest.description)
}
inline ::std::string* CreateProjectRequest::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:CreateProjectRequest.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateProjectRequest::release_description() {
  // @@protoc_insertion_point(field_release:CreateProjectRequest.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateProjectRequest::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:CreateProjectRequest.description)
}

// -------------------------------------------------------------------

// CreateProjectReply

// int32 code = 1;
inline void CreateProjectReply::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 CreateProjectReply::code() const {
  // @@protoc_insertion_point(field_get:CreateProjectReply.code)
  return code_;
}
inline void CreateProjectReply::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:CreateProjectReply.code)
}

// string message = 2;
inline void CreateProjectReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateProjectReply::message() const {
  // @@protoc_insertion_point(field_get:CreateProjectReply.message)
  return message_.GetNoArena();
}
inline void CreateProjectReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateProjectReply.message)
}
#if LANG_CXX11
inline void CreateProjectReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateProjectReply.message)
}
#endif
inline void CreateProjectReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateProjectReply.message)
}
inline void CreateProjectReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateProjectReply.message)
}
inline ::std::string* CreateProjectReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:CreateProjectReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateProjectReply::release_message() {
  // @@protoc_insertion_point(field_release:CreateProjectReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateProjectReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:CreateProjectReply.message)
}

// -------------------------------------------------------------------

// DeleteProjectRequest

// string name = 1;
inline void DeleteProjectRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteProjectRequest::name() const {
  // @@protoc_insertion_point(field_get:DeleteProjectRequest.name)
  return name_.GetNoArena();
}
inline void DeleteProjectRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeleteProjectRequest.name)
}
#if LANG_CXX11
inline void DeleteProjectRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeleteProjectRequest.name)
}
#endif
inline void DeleteProjectRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeleteProjectRequest.name)
}
inline void DeleteProjectRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeleteProjectRequest.name)
}
inline ::std::string* DeleteProjectRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:DeleteProjectRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteProjectRequest::release_name() {
  // @@protoc_insertion_point(field_release:DeleteProjectRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteProjectRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:DeleteProjectRequest.name)
}

// .ProjectStatus status = 2;
inline void DeleteProjectRequest::clear_status() {
  status_ = 0;
}
inline ::ProjectStatus DeleteProjectRequest::status() const {
  // @@protoc_insertion_point(field_get:DeleteProjectRequest.status)
  return static_cast< ::ProjectStatus >(status_);
}
inline void DeleteProjectRequest::set_status(::ProjectStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:DeleteProjectRequest.status)
}

// -------------------------------------------------------------------

// DeleteProjectReply

// int32 code = 1;
inline void DeleteProjectReply::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 DeleteProjectReply::code() const {
  // @@protoc_insertion_point(field_get:DeleteProjectReply.code)
  return code_;
}
inline void DeleteProjectReply::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:DeleteProjectReply.code)
}

// string message = 2;
inline void DeleteProjectReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteProjectReply::message() const {
  // @@protoc_insertion_point(field_get:DeleteProjectReply.message)
  return message_.GetNoArena();
}
inline void DeleteProjectReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeleteProjectReply.message)
}
#if LANG_CXX11
inline void DeleteProjectReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeleteProjectReply.message)
}
#endif
inline void DeleteProjectReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeleteProjectReply.message)
}
inline void DeleteProjectReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeleteProjectReply.message)
}
inline ::std::string* DeleteProjectReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:DeleteProjectReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteProjectReply::release_message() {
  // @@protoc_insertion_point(field_release:DeleteProjectReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteProjectReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:DeleteProjectReply.message)
}

// -------------------------------------------------------------------

// UpdateProjectRequest

// int32 id = 1;
inline void UpdateProjectRequest::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 UpdateProjectRequest::id() const {
  // @@protoc_insertion_point(field_get:UpdateProjectRequest.id)
  return id_;
}
inline void UpdateProjectRequest::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:UpdateProjectRequest.id)
}

// string name = 2;
inline void UpdateProjectRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateProjectRequest::name() const {
  // @@protoc_insertion_point(field_get:UpdateProjectRequest.name)
  return name_.GetNoArena();
}
inline void UpdateProjectRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UpdateProjectRequest.name)
}
#if LANG_CXX11
inline void UpdateProjectRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UpdateProjectRequest.name)
}
#endif
inline void UpdateProjectRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UpdateProjectRequest.name)
}
inline void UpdateProjectRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UpdateProjectRequest.name)
}
inline ::std::string* UpdateProjectRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:UpdateProjectRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateProjectRequest::release_name() {
  // @@protoc_insertion_point(field_release:UpdateProjectRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateProjectRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:UpdateProjectRequest.name)
}

// string description = 3;
inline void UpdateProjectRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateProjectRequest::description() const {
  // @@protoc_insertion_point(field_get:UpdateProjectRequest.description)
  return description_.GetNoArena();
}
inline void UpdateProjectRequest::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UpdateProjectRequest.description)
}
#if LANG_CXX11
inline void UpdateProjectRequest::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UpdateProjectRequest.description)
}
#endif
inline void UpdateProjectRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UpdateProjectRequest.description)
}
inline void UpdateProjectRequest::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UpdateProjectRequest.description)
}
inline ::std::string* UpdateProjectRequest::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:UpdateProjectRequest.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateProjectRequest::release_description() {
  // @@protoc_insertion_point(field_release:UpdateProjectRequest.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateProjectRequest::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:UpdateProjectRequest.description)
}

// -------------------------------------------------------------------

// UpdateProjectReply

// int32 code = 1;
inline void UpdateProjectReply::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 UpdateProjectReply::code() const {
  // @@protoc_insertion_point(field_get:UpdateProjectReply.code)
  return code_;
}
inline void UpdateProjectReply::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:UpdateProjectReply.code)
}

// string message = 2;
inline void UpdateProjectReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateProjectReply::message() const {
  // @@protoc_insertion_point(field_get:UpdateProjectReply.message)
  return message_.GetNoArena();
}
inline void UpdateProjectReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UpdateProjectReply.message)
}
#if LANG_CXX11
inline void UpdateProjectReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UpdateProjectReply.message)
}
#endif
inline void UpdateProjectReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UpdateProjectReply.message)
}
inline void UpdateProjectReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UpdateProjectReply.message)
}
inline ::std::string* UpdateProjectReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:UpdateProjectReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateProjectReply::release_message() {
  // @@protoc_insertion_point(field_release:UpdateProjectReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateProjectReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:UpdateProjectReply.message)
}

// -------------------------------------------------------------------

// GetProjectRequest

// string name = 1;
inline void GetProjectRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetProjectRequest::name() const {
  // @@protoc_insertion_point(field_get:GetProjectRequest.name)
  return name_.GetNoArena();
}
inline void GetProjectRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetProjectRequest.name)
}
#if LANG_CXX11
inline void GetProjectRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetProjectRequest.name)
}
#endif
inline void GetProjectRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetProjectRequest.name)
}
inline void GetProjectRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetProjectRequest.name)
}
inline ::std::string* GetProjectRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:GetProjectRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetProjectRequest::release_name() {
  // @@protoc_insertion_point(field_release:GetProjectRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetProjectRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:GetProjectRequest.name)
}

// -------------------------------------------------------------------

// GetProjectReply

// int32 code = 1;
inline void GetProjectReply::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 GetProjectReply::code() const {
  // @@protoc_insertion_point(field_get:GetProjectReply.code)
  return code_;
}
inline void GetProjectReply::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:GetProjectReply.code)
}

// string message = 2;
inline void GetProjectReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetProjectReply::message() const {
  // @@protoc_insertion_point(field_get:GetProjectReply.message)
  return message_.GetNoArena();
}
inline void GetProjectReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetProjectReply.message)
}
#if LANG_CXX11
inline void GetProjectReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetProjectReply.message)
}
#endif
inline void GetProjectReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetProjectReply.message)
}
inline void GetProjectReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetProjectReply.message)
}
inline ::std::string* GetProjectReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:GetProjectReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetProjectReply::release_message() {
  // @@protoc_insertion_point(field_release:GetProjectReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetProjectReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:GetProjectReply.message)
}

// .ProjectInfo project = 3;
inline bool GetProjectReply::has_project() const {
  return this != internal_default_instance() && project_ != NULL;
}
inline void GetProjectReply::clear_project() {
  if (GetArenaNoVirtual() == NULL && project_ != NULL) delete project_;
  project_ = NULL;
}
inline const ::ProjectInfo& GetProjectReply::project() const {
  const ::ProjectInfo* p = project_;
  // @@protoc_insertion_point(field_get:GetProjectReply.project)
  return p != NULL ? *p : *reinterpret_cast<const ::ProjectInfo*>(
      &::_ProjectInfo_default_instance_);
}
inline ::ProjectInfo* GetProjectReply::mutable_project() {
  
  if (project_ == NULL) {
    project_ = new ::ProjectInfo;
  }
  // @@protoc_insertion_point(field_mutable:GetProjectReply.project)
  return project_;
}
inline ::ProjectInfo* GetProjectReply::release_project() {
  // @@protoc_insertion_point(field_release:GetProjectReply.project)
  
  ::ProjectInfo* temp = project_;
  project_ = NULL;
  return temp;
}
inline void GetProjectReply::set_allocated_project(::ProjectInfo* project) {
  delete project_;
  project_ = project;
  if (project) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GetProjectReply.project)
}

// -------------------------------------------------------------------

// ProjectInfo

// int32 id = 1;
inline void ProjectInfo::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 ProjectInfo::id() const {
  // @@protoc_insertion_point(field_get:ProjectInfo.id)
  return id_;
}
inline void ProjectInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ProjectInfo.id)
}

// string name = 2;
inline void ProjectInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProjectInfo::name() const {
  // @@protoc_insertion_point(field_get:ProjectInfo.name)
  return name_.GetNoArena();
}
inline void ProjectInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProjectInfo.name)
}
#if LANG_CXX11
inline void ProjectInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProjectInfo.name)
}
#endif
inline void ProjectInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProjectInfo.name)
}
inline void ProjectInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProjectInfo.name)
}
inline ::std::string* ProjectInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ProjectInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProjectInfo::release_name() {
  // @@protoc_insertion_point(field_release:ProjectInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProjectInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ProjectInfo.name)
}

// string cluster_name = 3;
inline void ProjectInfo::clear_cluster_name() {
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProjectInfo::cluster_name() const {
  // @@protoc_insertion_point(field_get:ProjectInfo.cluster_name)
  return cluster_name_.GetNoArena();
}
inline void ProjectInfo::set_cluster_name(const ::std::string& value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProjectInfo.cluster_name)
}
#if LANG_CXX11
inline void ProjectInfo::set_cluster_name(::std::string&& value) {
  
  cluster_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProjectInfo.cluster_name)
}
#endif
inline void ProjectInfo::set_cluster_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProjectInfo.cluster_name)
}
inline void ProjectInfo::set_cluster_name(const char* value, size_t size) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProjectInfo.cluster_name)
}
inline ::std::string* ProjectInfo::mutable_cluster_name() {
  
  // @@protoc_insertion_point(field_mutable:ProjectInfo.cluster_name)
  return cluster_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProjectInfo::release_cluster_name() {
  // @@protoc_insertion_point(field_release:ProjectInfo.cluster_name)
  
  return cluster_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProjectInfo::set_allocated_cluster_name(::std::string* cluster_name) {
  if (cluster_name != NULL) {
    
  } else {
    
  }
  cluster_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_name);
  // @@protoc_insertion_point(field_set_allocated:ProjectInfo.cluster_name)
}

// string description = 4;
inline void ProjectInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProjectInfo::description() const {
  // @@protoc_insertion_point(field_get:ProjectInfo.description)
  return description_.GetNoArena();
}
inline void ProjectInfo::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProjectInfo.description)
}
#if LANG_CXX11
inline void ProjectInfo::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProjectInfo.description)
}
#endif
inline void ProjectInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProjectInfo.description)
}
inline void ProjectInfo::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProjectInfo.description)
}
inline ::std::string* ProjectInfo::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:ProjectInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProjectInfo::release_description() {
  // @@protoc_insertion_point(field_release:ProjectInfo.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProjectInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ProjectInfo.description)
}

// int32 total_index_number = 5;
inline void ProjectInfo::clear_total_index_number() {
  total_index_number_ = 0;
}
inline ::google::protobuf::int32 ProjectInfo::total_index_number() const {
  // @@protoc_insertion_point(field_get:ProjectInfo.total_index_number)
  return total_index_number_;
}
inline void ProjectInfo::set_total_index_number(::google::protobuf::int32 value) {
  
  total_index_number_ = value;
  // @@protoc_insertion_point(field_set:ProjectInfo.total_index_number)
}

// int64 total_doc_number = 6;
inline void ProjectInfo::clear_total_doc_number() {
  total_doc_number_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ProjectInfo::total_doc_number() const {
  // @@protoc_insertion_point(field_get:ProjectInfo.total_doc_number)
  return total_doc_number_;
}
inline void ProjectInfo::set_total_doc_number(::google::protobuf::int64 value) {
  
  total_doc_number_ = value;
  // @@protoc_insertion_point(field_set:ProjectInfo.total_doc_number)
}

// int64 total_data_size = 7;
inline void ProjectInfo::clear_total_data_size() {
  total_data_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ProjectInfo::total_data_size() const {
  // @@protoc_insertion_point(field_get:ProjectInfo.total_data_size)
  return total_data_size_;
}
inline void ProjectInfo::set_total_data_size(::google::protobuf::int64 value) {
  
  total_data_size_ = value;
  // @@protoc_insertion_point(field_set:ProjectInfo.total_data_size)
}

// int32 cluster_id = 8;
inline void ProjectInfo::clear_cluster_id() {
  cluster_id_ = 0;
}
inline ::google::protobuf::int32 ProjectInfo::cluster_id() const {
  // @@protoc_insertion_point(field_get:ProjectInfo.cluster_id)
  return cluster_id_;
}
inline void ProjectInfo::set_cluster_id(::google::protobuf::int32 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:ProjectInfo.cluster_id)
}

// .ProjectStatus status = 9;
inline void ProjectInfo::clear_status() {
  status_ = 0;
}
inline ::ProjectStatus ProjectInfo::status() const {
  // @@protoc_insertion_point(field_get:ProjectInfo.status)
  return static_cast< ::ProjectStatus >(status_);
}
inline void ProjectInfo::set_status(::ProjectStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ProjectInfo.status)
}

// int32 total_template_number = 17;
inline void ProjectInfo::clear_total_template_number() {
  total_template_number_ = 0;
}
inline ::google::protobuf::int32 ProjectInfo::total_template_number() const {
  // @@protoc_insertion_point(field_get:ProjectInfo.total_template_number)
  return total_template_number_;
}
inline void ProjectInfo::set_total_template_number(::google::protobuf::int32 value) {
  
  total_template_number_ = value;
  // @@protoc_insertion_point(field_set:ProjectInfo.total_template_number)
}

// -------------------------------------------------------------------

// ListProjectRequest

// string cluster_id = 1;
inline void ListProjectRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListProjectRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:ListProjectRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void ListProjectRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ListProjectRequest.cluster_id)
}
#if LANG_CXX11
inline void ListProjectRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ListProjectRequest.cluster_id)
}
#endif
inline void ListProjectRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ListProjectRequest.cluster_id)
}
inline void ListProjectRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ListProjectRequest.cluster_id)
}
inline ::std::string* ListProjectRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:ListProjectRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListProjectRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:ListProjectRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListProjectRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:ListProjectRequest.cluster_id)
}

// string name = 2;
inline void ListProjectRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListProjectRequest::name() const {
  // @@protoc_insertion_point(field_get:ListProjectRequest.name)
  return name_.GetNoArena();
}
inline void ListProjectRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ListProjectRequest.name)
}
#if LANG_CXX11
inline void ListProjectRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ListProjectRequest.name)
}
#endif
inline void ListProjectRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ListProjectRequest.name)
}
inline void ListProjectRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ListProjectRequest.name)
}
inline ::std::string* ListProjectRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ListProjectRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListProjectRequest::release_name() {
  // @@protoc_insertion_point(field_release:ListProjectRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListProjectRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ListProjectRequest.name)
}

// -------------------------------------------------------------------

// ListProjectReply

// int32 code = 1;
inline void ListProjectReply::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 ListProjectReply::code() const {
  // @@protoc_insertion_point(field_get:ListProjectReply.code)
  return code_;
}
inline void ListProjectReply::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:ListProjectReply.code)
}

// string message = 2;
inline void ListProjectReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListProjectReply::message() const {
  // @@protoc_insertion_point(field_get:ListProjectReply.message)
  return message_.GetNoArena();
}
inline void ListProjectReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ListProjectReply.message)
}
#if LANG_CXX11
inline void ListProjectReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ListProjectReply.message)
}
#endif
inline void ListProjectReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ListProjectReply.message)
}
inline void ListProjectReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ListProjectReply.message)
}
inline ::std::string* ListProjectReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ListProjectReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListProjectReply::release_message() {
  // @@protoc_insertion_point(field_release:ListProjectReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListProjectReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ListProjectReply.message)
}

// repeated string projects = 3;
inline int ListProjectReply::projects_size() const {
  return projects_.size();
}
inline void ListProjectReply::clear_projects() {
  projects_.Clear();
}
inline const ::std::string& ListProjectReply::projects(int index) const {
  // @@protoc_insertion_point(field_get:ListProjectReply.projects)
  return projects_.Get(index);
}
inline ::std::string* ListProjectReply::mutable_projects(int index) {
  // @@protoc_insertion_point(field_mutable:ListProjectReply.projects)
  return projects_.Mutable(index);
}
inline void ListProjectReply::set_projects(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ListProjectReply.projects)
  projects_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ListProjectReply::set_projects(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ListProjectReply.projects)
  projects_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ListProjectReply::set_projects(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  projects_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ListProjectReply.projects)
}
inline void ListProjectReply::set_projects(int index, const char* value, size_t size) {
  projects_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ListProjectReply.projects)
}
inline ::std::string* ListProjectReply::add_projects() {
  // @@protoc_insertion_point(field_add_mutable:ListProjectReply.projects)
  return projects_.Add();
}
inline void ListProjectReply::add_projects(const ::std::string& value) {
  projects_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ListProjectReply.projects)
}
#if LANG_CXX11
inline void ListProjectReply::add_projects(::std::string&& value) {
  projects_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ListProjectReply.projects)
}
#endif
inline void ListProjectReply::add_projects(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  projects_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ListProjectReply.projects)
}
inline void ListProjectReply::add_projects(const char* value, size_t size) {
  projects_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ListProjectReply.projects)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListProjectReply::projects() const {
  // @@protoc_insertion_point(field_list:ListProjectReply.projects)
  return projects_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ListProjectReply::mutable_projects() {
  // @@protoc_insertion_point(field_mutable_list:ListProjectReply.projects)
  return &projects_;
}

// -------------------------------------------------------------------

// ListProjectDetailsRequest

// string cluster = 1;
inline void ListProjectDetailsRequest::clear_cluster() {
  cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListProjectDetailsRequest::cluster() const {
  // @@protoc_insertion_point(field_get:ListProjectDetailsRequest.cluster)
  return cluster_.GetNoArena();
}
inline void ListProjectDetailsRequest::set_cluster(const ::std::string& value) {
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ListProjectDetailsRequest.cluster)
}
#if LANG_CXX11
inline void ListProjectDetailsRequest::set_cluster(::std::string&& value) {
  
  cluster_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ListProjectDetailsRequest.cluster)
}
#endif
inline void ListProjectDetailsRequest::set_cluster(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ListProjectDetailsRequest.cluster)
}
inline void ListProjectDetailsRequest::set_cluster(const char* value, size_t size) {
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ListProjectDetailsRequest.cluster)
}
inline ::std::string* ListProjectDetailsRequest::mutable_cluster() {
  
  // @@protoc_insertion_point(field_mutable:ListProjectDetailsRequest.cluster)
  return cluster_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListProjectDetailsRequest::release_cluster() {
  // @@protoc_insertion_point(field_release:ListProjectDetailsRequest.cluster)
  
  return cluster_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListProjectDetailsRequest::set_allocated_cluster(::std::string* cluster) {
  if (cluster != NULL) {
    
  } else {
    
  }
  cluster_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster);
  // @@protoc_insertion_point(field_set_allocated:ListProjectDetailsRequest.cluster)
}

// -------------------------------------------------------------------

// ListProjectDetailsReply

// int32 error_code = 1;
inline void ListProjectDetailsReply::clear_error_code() {
  error_code_ = 0;
}
inline ::google::protobuf::int32 ListProjectDetailsReply::error_code() const {
  // @@protoc_insertion_point(field_get:ListProjectDetailsReply.error_code)
  return error_code_;
}
inline void ListProjectDetailsReply::set_error_code(::google::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:ListProjectDetailsReply.error_code)
}

// string error_message = 2;
inline void ListProjectDetailsReply::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListProjectDetailsReply::error_message() const {
  // @@protoc_insertion_point(field_get:ListProjectDetailsReply.error_message)
  return error_message_.GetNoArena();
}
inline void ListProjectDetailsReply::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ListProjectDetailsReply.error_message)
}
#if LANG_CXX11
inline void ListProjectDetailsReply::set_error_message(::std::string&& value) {
  
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ListProjectDetailsReply.error_message)
}
#endif
inline void ListProjectDetailsReply::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ListProjectDetailsReply.error_message)
}
inline void ListProjectDetailsReply::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ListProjectDetailsReply.error_message)
}
inline ::std::string* ListProjectDetailsReply::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:ListProjectDetailsReply.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListProjectDetailsReply::release_error_message() {
  // @@protoc_insertion_point(field_release:ListProjectDetailsReply.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListProjectDetailsReply::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:ListProjectDetailsReply.error_message)
}

// repeated .ProjectInfo projects = 3;
inline int ListProjectDetailsReply::projects_size() const {
  return projects_.size();
}
inline void ListProjectDetailsReply::clear_projects() {
  projects_.Clear();
}
inline const ::ProjectInfo& ListProjectDetailsReply::projects(int index) const {
  // @@protoc_insertion_point(field_get:ListProjectDetailsReply.projects)
  return projects_.Get(index);
}
inline ::ProjectInfo* ListProjectDetailsReply::mutable_projects(int index) {
  // @@protoc_insertion_point(field_mutable:ListProjectDetailsReply.projects)
  return projects_.Mutable(index);
}
inline ::ProjectInfo* ListProjectDetailsReply::add_projects() {
  // @@protoc_insertion_point(field_add:ListProjectDetailsReply.projects)
  return projects_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ProjectInfo >*
ListProjectDetailsReply::mutable_projects() {
  // @@protoc_insertion_point(field_mutable_list:ListProjectDetailsReply.projects)
  return &projects_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ProjectInfo >&
ListProjectDetailsReply::projects() const {
  // @@protoc_insertion_point(field_list:ListProjectDetailsReply.projects)
  return projects_;
}

// -------------------------------------------------------------------

// CreateIndexRequest

// string name = 1;
inline void CreateIndexRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateIndexRequest::name() const {
  // @@protoc_insertion_point(field_get:CreateIndexRequest.name)
  return name_.GetNoArena();
}
inline void CreateIndexRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateIndexRequest.name)
}
#if LANG_CXX11
inline void CreateIndexRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateIndexRequest.name)
}
#endif
inline void CreateIndexRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateIndexRequest.name)
}
inline void CreateIndexRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateIndexRequest.name)
}
inline ::std::string* CreateIndexRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CreateIndexRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateIndexRequest::release_name() {
  // @@protoc_insertion_point(field_release:CreateIndexRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateIndexRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CreateIndexRequest.name)
}

// string project = 2;
inline void CreateIndexRequest::clear_project() {
  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateIndexRequest::project() const {
  // @@protoc_insertion_point(field_get:CreateIndexRequest.project)
  return project_.GetNoArena();
}
inline void CreateIndexRequest::set_project(const ::std::string& value) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateIndexRequest.project)
}
#if LANG_CXX11
inline void CreateIndexRequest::set_project(::std::string&& value) {
  
  project_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateIndexRequest.project)
}
#endif
inline void CreateIndexRequest::set_project(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateIndexRequest.project)
}
inline void CreateIndexRequest::set_project(const char* value, size_t size) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateIndexRequest.project)
}
inline ::std::string* CreateIndexRequest::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:CreateIndexRequest.project)
  return project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateIndexRequest::release_project() {
  // @@protoc_insertion_point(field_release:CreateIndexRequest.project)
  
  return project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateIndexRequest::set_allocated_project(::std::string* project) {
  if (project != NULL) {
    
  } else {
    
  }
  project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project);
  // @@protoc_insertion_point(field_set_allocated:CreateIndexRequest.project)
}

// repeated string aliases = 4;
inline int CreateIndexRequest::aliases_size() const {
  return aliases_.size();
}
inline void CreateIndexRequest::clear_aliases() {
  aliases_.Clear();
}
inline const ::std::string& CreateIndexRequest::aliases(int index) const {
  // @@protoc_insertion_point(field_get:CreateIndexRequest.aliases)
  return aliases_.Get(index);
}
inline ::std::string* CreateIndexRequest::mutable_aliases(int index) {
  // @@protoc_insertion_point(field_mutable:CreateIndexRequest.aliases)
  return aliases_.Mutable(index);
}
inline void CreateIndexRequest::set_aliases(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CreateIndexRequest.aliases)
  aliases_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CreateIndexRequest::set_aliases(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:CreateIndexRequest.aliases)
  aliases_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CreateIndexRequest::set_aliases(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  aliases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CreateIndexRequest.aliases)
}
inline void CreateIndexRequest::set_aliases(int index, const char* value, size_t size) {
  aliases_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CreateIndexRequest.aliases)
}
inline ::std::string* CreateIndexRequest::add_aliases() {
  // @@protoc_insertion_point(field_add_mutable:CreateIndexRequest.aliases)
  return aliases_.Add();
}
inline void CreateIndexRequest::add_aliases(const ::std::string& value) {
  aliases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CreateIndexRequest.aliases)
}
#if LANG_CXX11
inline void CreateIndexRequest::add_aliases(::std::string&& value) {
  aliases_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CreateIndexRequest.aliases)
}
#endif
inline void CreateIndexRequest::add_aliases(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  aliases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CreateIndexRequest.aliases)
}
inline void CreateIndexRequest::add_aliases(const char* value, size_t size) {
  aliases_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CreateIndexRequest.aliases)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CreateIndexRequest::aliases() const {
  // @@protoc_insertion_point(field_list:CreateIndexRequest.aliases)
  return aliases_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CreateIndexRequest::mutable_aliases() {
  // @@protoc_insertion_point(field_mutable_list:CreateIndexRequest.aliases)
  return &aliases_;
}

// .google.protobuf.StringValue mapping = 5;
inline bool CreateIndexRequest::has_mapping() const {
  return this != internal_default_instance() && mapping_ != NULL;
}
inline void CreateIndexRequest::clear_mapping() {
  if (GetArenaNoVirtual() == NULL && mapping_ != NULL) delete mapping_;
  mapping_ = NULL;
}
inline const ::google::protobuf::StringValue& CreateIndexRequest::mapping() const {
  const ::google::protobuf::StringValue* p = mapping_;
  // @@protoc_insertion_point(field_get:CreateIndexRequest.mapping)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* CreateIndexRequest::mutable_mapping() {
  
  if (mapping_ == NULL) {
    mapping_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:CreateIndexRequest.mapping)
  return mapping_;
}
inline ::google::protobuf::StringValue* CreateIndexRequest::release_mapping() {
  // @@protoc_insertion_point(field_release:CreateIndexRequest.mapping)
  
  ::google::protobuf::StringValue* temp = mapping_;
  mapping_ = NULL;
  return temp;
}
inline void CreateIndexRequest::set_allocated_mapping(::google::protobuf::StringValue* mapping) {
  delete mapping_;
  if (mapping != NULL && mapping->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_mapping = new ::google::protobuf::StringValue;
    new_mapping->CopyFrom(*mapping);
    mapping = new_mapping;
  }
  mapping_ = mapping;
  if (mapping) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateIndexRequest.mapping)
}

// .google.protobuf.StringValue setting = 6;
inline bool CreateIndexRequest::has_setting() const {
  return this != internal_default_instance() && setting_ != NULL;
}
inline void CreateIndexRequest::clear_setting() {
  if (GetArenaNoVirtual() == NULL && setting_ != NULL) delete setting_;
  setting_ = NULL;
}
inline const ::google::protobuf::StringValue& CreateIndexRequest::setting() const {
  const ::google::protobuf::StringValue* p = setting_;
  // @@protoc_insertion_point(field_get:CreateIndexRequest.setting)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* CreateIndexRequest::mutable_setting() {
  
  if (setting_ == NULL) {
    setting_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:CreateIndexRequest.setting)
  return setting_;
}
inline ::google::protobuf::StringValue* CreateIndexRequest::release_setting() {
  // @@protoc_insertion_point(field_release:CreateIndexRequest.setting)
  
  ::google::protobuf::StringValue* temp = setting_;
  setting_ = NULL;
  return temp;
}
inline void CreateIndexRequest::set_allocated_setting(::google::protobuf::StringValue* setting) {
  delete setting_;
  if (setting != NULL && setting->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_setting = new ::google::protobuf::StringValue;
    new_setting->CopyFrom(*setting);
    setting = new_setting;
  }
  setting_ = setting;
  if (setting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateIndexRequest.setting)
}

// .AutoIndexRollingPolicy rolling_policy = 7;
inline void CreateIndexRequest::clear_rolling_policy() {
  rolling_policy_ = 0;
}
inline ::AutoIndexRollingPolicy CreateIndexRequest::rolling_policy() const {
  // @@protoc_insertion_point(field_get:CreateIndexRequest.rolling_policy)
  return static_cast< ::AutoIndexRollingPolicy >(rolling_policy_);
}
inline void CreateIndexRequest::set_rolling_policy(::AutoIndexRollingPolicy value) {
  
  rolling_policy_ = value;
  // @@protoc_insertion_point(field_set:CreateIndexRequest.rolling_policy)
}

// -------------------------------------------------------------------

// CreateIndexReply

// int32 code = 1;
inline void CreateIndexReply::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 CreateIndexReply::code() const {
  // @@protoc_insertion_point(field_get:CreateIndexReply.code)
  return code_;
}
inline void CreateIndexReply::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:CreateIndexReply.code)
}

// string message = 2;
inline void CreateIndexReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateIndexReply::message() const {
  // @@protoc_insertion_point(field_get:CreateIndexReply.message)
  return message_.GetNoArena();
}
inline void CreateIndexReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateIndexReply.message)
}
#if LANG_CXX11
inline void CreateIndexReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateIndexReply.message)
}
#endif
inline void CreateIndexReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateIndexReply.message)
}
inline void CreateIndexReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateIndexReply.message)
}
inline ::std::string* CreateIndexReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:CreateIndexReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateIndexReply::release_message() {
  // @@protoc_insertion_point(field_release:CreateIndexReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateIndexReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:CreateIndexReply.message)
}

// -------------------------------------------------------------------

// GetIndexRequest

// int32 index_id = 1;
inline void GetIndexRequest::clear_index_id() {
  index_id_ = 0;
}
inline ::google::protobuf::int32 GetIndexRequest::index_id() const {
  // @@protoc_insertion_point(field_get:GetIndexRequest.index_id)
  return index_id_;
}
inline void GetIndexRequest::set_index_id(::google::protobuf::int32 value) {
  
  index_id_ = value;
  // @@protoc_insertion_point(field_set:GetIndexRequest.index_id)
}

// -------------------------------------------------------------------

// GetIndexReply

// int32 code = 1;
inline void GetIndexReply::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 GetIndexReply::code() const {
  // @@protoc_insertion_point(field_get:GetIndexReply.code)
  return code_;
}
inline void GetIndexReply::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:GetIndexReply.code)
}

// string message = 2;
inline void GetIndexReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetIndexReply::message() const {
  // @@protoc_insertion_point(field_get:GetIndexReply.message)
  return message_.GetNoArena();
}
inline void GetIndexReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetIndexReply.message)
}
#if LANG_CXX11
inline void GetIndexReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetIndexReply.message)
}
#endif
inline void GetIndexReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetIndexReply.message)
}
inline void GetIndexReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetIndexReply.message)
}
inline ::std::string* GetIndexReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:GetIndexReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetIndexReply::release_message() {
  // @@protoc_insertion_point(field_release:GetIndexReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetIndexReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:GetIndexReply.message)
}

// .IndexInfo index = 3;
inline bool GetIndexReply::has_index() const {
  return this != internal_default_instance() && index_ != NULL;
}
inline void GetIndexReply::clear_index() {
  if (GetArenaNoVirtual() == NULL && index_ != NULL) delete index_;
  index_ = NULL;
}
inline const ::IndexInfo& GetIndexReply::index() const {
  const ::IndexInfo* p = index_;
  // @@protoc_insertion_point(field_get:GetIndexReply.index)
  return p != NULL ? *p : *reinterpret_cast<const ::IndexInfo*>(
      &::_IndexInfo_default_instance_);
}
inline ::IndexInfo* GetIndexReply::mutable_index() {
  
  if (index_ == NULL) {
    index_ = new ::IndexInfo;
  }
  // @@protoc_insertion_point(field_mutable:GetIndexReply.index)
  return index_;
}
inline ::IndexInfo* GetIndexReply::release_index() {
  // @@protoc_insertion_point(field_release:GetIndexReply.index)
  
  ::IndexInfo* temp = index_;
  index_ = NULL;
  return temp;
}
inline void GetIndexReply::set_allocated_index(::IndexInfo* index) {
  delete index_;
  index_ = index;
  if (index) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GetIndexReply.index)
}

// -------------------------------------------------------------------

// IndexInfo

// string name = 1;
inline void IndexInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexInfo::name() const {
  // @@protoc_insertion_point(field_get:IndexInfo.name)
  return name_.GetNoArena();
}
inline void IndexInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndexInfo.name)
}
#if LANG_CXX11
inline void IndexInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndexInfo.name)
}
#endif
inline void IndexInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndexInfo.name)
}
inline void IndexInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndexInfo.name)
}
inline ::std::string* IndexInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:IndexInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexInfo::release_name() {
  // @@protoc_insertion_point(field_release:IndexInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:IndexInfo.name)
}

// string cluster_name = 2;
inline void IndexInfo::clear_cluster_name() {
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexInfo::cluster_name() const {
  // @@protoc_insertion_point(field_get:IndexInfo.cluster_name)
  return cluster_name_.GetNoArena();
}
inline void IndexInfo::set_cluster_name(const ::std::string& value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndexInfo.cluster_name)
}
#if LANG_CXX11
inline void IndexInfo::set_cluster_name(::std::string&& value) {
  
  cluster_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndexInfo.cluster_name)
}
#endif
inline void IndexInfo::set_cluster_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndexInfo.cluster_name)
}
inline void IndexInfo::set_cluster_name(const char* value, size_t size) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndexInfo.cluster_name)
}
inline ::std::string* IndexInfo::mutable_cluster_name() {
  
  // @@protoc_insertion_point(field_mutable:IndexInfo.cluster_name)
  return cluster_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexInfo::release_cluster_name() {
  // @@protoc_insertion_point(field_release:IndexInfo.cluster_name)
  
  return cluster_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexInfo::set_allocated_cluster_name(::std::string* cluster_name) {
  if (cluster_name != NULL) {
    
  } else {
    
  }
  cluster_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_name);
  // @@protoc_insertion_point(field_set_allocated:IndexInfo.cluster_name)
}

// string project_name = 3;
inline void IndexInfo::clear_project_name() {
  project_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexInfo::project_name() const {
  // @@protoc_insertion_point(field_get:IndexInfo.project_name)
  return project_name_.GetNoArena();
}
inline void IndexInfo::set_project_name(const ::std::string& value) {
  
  project_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndexInfo.project_name)
}
#if LANG_CXX11
inline void IndexInfo::set_project_name(::std::string&& value) {
  
  project_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndexInfo.project_name)
}
#endif
inline void IndexInfo::set_project_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndexInfo.project_name)
}
inline void IndexInfo::set_project_name(const char* value, size_t size) {
  
  project_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndexInfo.project_name)
}
inline ::std::string* IndexInfo::mutable_project_name() {
  
  // @@protoc_insertion_point(field_mutable:IndexInfo.project_name)
  return project_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexInfo::release_project_name() {
  // @@protoc_insertion_point(field_release:IndexInfo.project_name)
  
  return project_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexInfo::set_allocated_project_name(::std::string* project_name) {
  if (project_name != NULL) {
    
  } else {
    
  }
  project_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_name);
  // @@protoc_insertion_point(field_set_allocated:IndexInfo.project_name)
}

// string mapping = 5;
inline void IndexInfo::clear_mapping() {
  mapping_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexInfo::mapping() const {
  // @@protoc_insertion_point(field_get:IndexInfo.mapping)
  return mapping_.GetNoArena();
}
inline void IndexInfo::set_mapping(const ::std::string& value) {
  
  mapping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndexInfo.mapping)
}
#if LANG_CXX11
inline void IndexInfo::set_mapping(::std::string&& value) {
  
  mapping_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndexInfo.mapping)
}
#endif
inline void IndexInfo::set_mapping(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mapping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndexInfo.mapping)
}
inline void IndexInfo::set_mapping(const char* value, size_t size) {
  
  mapping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndexInfo.mapping)
}
inline ::std::string* IndexInfo::mutable_mapping() {
  
  // @@protoc_insertion_point(field_mutable:IndexInfo.mapping)
  return mapping_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexInfo::release_mapping() {
  // @@protoc_insertion_point(field_release:IndexInfo.mapping)
  
  return mapping_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexInfo::set_allocated_mapping(::std::string* mapping) {
  if (mapping != NULL) {
    
  } else {
    
  }
  mapping_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mapping);
  // @@protoc_insertion_point(field_set_allocated:IndexInfo.mapping)
}

// string setting = 6;
inline void IndexInfo::clear_setting() {
  setting_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexInfo::setting() const {
  // @@protoc_insertion_point(field_get:IndexInfo.setting)
  return setting_.GetNoArena();
}
inline void IndexInfo::set_setting(const ::std::string& value) {
  
  setting_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndexInfo.setting)
}
#if LANG_CXX11
inline void IndexInfo::set_setting(::std::string&& value) {
  
  setting_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndexInfo.setting)
}
#endif
inline void IndexInfo::set_setting(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  setting_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndexInfo.setting)
}
inline void IndexInfo::set_setting(const char* value, size_t size) {
  
  setting_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndexInfo.setting)
}
inline ::std::string* IndexInfo::mutable_setting() {
  
  // @@protoc_insertion_point(field_mutable:IndexInfo.setting)
  return setting_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexInfo::release_setting() {
  // @@protoc_insertion_point(field_release:IndexInfo.setting)
  
  return setting_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexInfo::set_allocated_setting(::std::string* setting) {
  if (setting != NULL) {
    
  } else {
    
  }
  setting_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), setting);
  // @@protoc_insertion_point(field_set_allocated:IndexInfo.setting)
}

// repeated string aliases = 7;
inline int IndexInfo::aliases_size() const {
  return aliases_.size();
}
inline void IndexInfo::clear_aliases() {
  aliases_.Clear();
}
inline const ::std::string& IndexInfo::aliases(int index) const {
  // @@protoc_insertion_point(field_get:IndexInfo.aliases)
  return aliases_.Get(index);
}
inline ::std::string* IndexInfo::mutable_aliases(int index) {
  // @@protoc_insertion_point(field_mutable:IndexInfo.aliases)
  return aliases_.Mutable(index);
}
inline void IndexInfo::set_aliases(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IndexInfo.aliases)
  aliases_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void IndexInfo::set_aliases(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:IndexInfo.aliases)
  aliases_.Mutable(index)->assign(std::move(value));
}
#endif
inline void IndexInfo::set_aliases(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  aliases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IndexInfo.aliases)
}
inline void IndexInfo::set_aliases(int index, const char* value, size_t size) {
  aliases_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IndexInfo.aliases)
}
inline ::std::string* IndexInfo::add_aliases() {
  // @@protoc_insertion_point(field_add_mutable:IndexInfo.aliases)
  return aliases_.Add();
}
inline void IndexInfo::add_aliases(const ::std::string& value) {
  aliases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IndexInfo.aliases)
}
#if LANG_CXX11
inline void IndexInfo::add_aliases(::std::string&& value) {
  aliases_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:IndexInfo.aliases)
}
#endif
inline void IndexInfo::add_aliases(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  aliases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IndexInfo.aliases)
}
inline void IndexInfo::add_aliases(const char* value, size_t size) {
  aliases_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IndexInfo.aliases)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IndexInfo::aliases() const {
  // @@protoc_insertion_point(field_list:IndexInfo.aliases)
  return aliases_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IndexInfo::mutable_aliases() {
  // @@protoc_insertion_point(field_mutable_list:IndexInfo.aliases)
  return &aliases_;
}

// int64 total_doc_number = 8;
inline void IndexInfo::clear_total_doc_number() {
  total_doc_number_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 IndexInfo::total_doc_number() const {
  // @@protoc_insertion_point(field_get:IndexInfo.total_doc_number)
  return total_doc_number_;
}
inline void IndexInfo::set_total_doc_number(::google::protobuf::int64 value) {
  
  total_doc_number_ = value;
  // @@protoc_insertion_point(field_set:IndexInfo.total_doc_number)
}

// int64 total_data_size = 9;
inline void IndexInfo::clear_total_data_size() {
  total_data_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 IndexInfo::total_data_size() const {
  // @@protoc_insertion_point(field_get:IndexInfo.total_data_size)
  return total_data_size_;
}
inline void IndexInfo::set_total_data_size(::google::protobuf::int64 value) {
  
  total_data_size_ = value;
  // @@protoc_insertion_point(field_set:IndexInfo.total_data_size)
}

// int32 primary_shard_number = 10;
inline void IndexInfo::clear_primary_shard_number() {
  primary_shard_number_ = 0;
}
inline ::google::protobuf::int32 IndexInfo::primary_shard_number() const {
  // @@protoc_insertion_point(field_get:IndexInfo.primary_shard_number)
  return primary_shard_number_;
}
inline void IndexInfo::set_primary_shard_number(::google::protobuf::int32 value) {
  
  primary_shard_number_ = value;
  // @@protoc_insertion_point(field_set:IndexInfo.primary_shard_number)
}

// int32 replica_shard_number = 11;
inline void IndexInfo::clear_replica_shard_number() {
  replica_shard_number_ = 0;
}
inline ::google::protobuf::int32 IndexInfo::replica_shard_number() const {
  // @@protoc_insertion_point(field_get:IndexInfo.replica_shard_number)
  return replica_shard_number_;
}
inline void IndexInfo::set_replica_shard_number(::google::protobuf::int32 value) {
  
  replica_shard_number_ = value;
  // @@protoc_insertion_point(field_set:IndexInfo.replica_shard_number)
}

// string index_health = 12;
inline void IndexInfo::clear_index_health() {
  index_health_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexInfo::index_health() const {
  // @@protoc_insertion_point(field_get:IndexInfo.index_health)
  return index_health_.GetNoArena();
}
inline void IndexInfo::set_index_health(const ::std::string& value) {
  
  index_health_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndexInfo.index_health)
}
#if LANG_CXX11
inline void IndexInfo::set_index_health(::std::string&& value) {
  
  index_health_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndexInfo.index_health)
}
#endif
inline void IndexInfo::set_index_health(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  index_health_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndexInfo.index_health)
}
inline void IndexInfo::set_index_health(const char* value, size_t size) {
  
  index_health_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndexInfo.index_health)
}
inline ::std::string* IndexInfo::mutable_index_health() {
  
  // @@protoc_insertion_point(field_mutable:IndexInfo.index_health)
  return index_health_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexInfo::release_index_health() {
  // @@protoc_insertion_point(field_release:IndexInfo.index_health)
  
  return index_health_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexInfo::set_allocated_index_health(::std::string* index_health) {
  if (index_health != NULL) {
    
  } else {
    
  }
  index_health_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), index_health);
  // @@protoc_insertion_point(field_set_allocated:IndexInfo.index_health)
}

// string project_id = 13;
inline void IndexInfo::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexInfo::project_id() const {
  // @@protoc_insertion_point(field_get:IndexInfo.project_id)
  return project_id_.GetNoArena();
}
inline void IndexInfo::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndexInfo.project_id)
}
#if LANG_CXX11
inline void IndexInfo::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndexInfo.project_id)
}
#endif
inline void IndexInfo::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndexInfo.project_id)
}
inline void IndexInfo::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndexInfo.project_id)
}
inline ::std::string* IndexInfo::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:IndexInfo.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexInfo::release_project_id() {
  // @@protoc_insertion_point(field_release:IndexInfo.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexInfo::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:IndexInfo.project_id)
}

// string cluster_id = 14;
inline void IndexInfo::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexInfo::cluster_id() const {
  // @@protoc_insertion_point(field_get:IndexInfo.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void IndexInfo::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndexInfo.cluster_id)
}
#if LANG_CXX11
inline void IndexInfo::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndexInfo.cluster_id)
}
#endif
inline void IndexInfo::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndexInfo.cluster_id)
}
inline void IndexInfo::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndexInfo.cluster_id)
}
inline ::std::string* IndexInfo::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:IndexInfo.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexInfo::release_cluster_id() {
  // @@protoc_insertion_point(field_release:IndexInfo.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexInfo::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:IndexInfo.cluster_id)
}

// .AutoIndexRollingPolicy rolling_policy = 15;
inline void IndexInfo::clear_rolling_policy() {
  rolling_policy_ = 0;
}
inline ::AutoIndexRollingPolicy IndexInfo::rolling_policy() const {
  // @@protoc_insertion_point(field_get:IndexInfo.rolling_policy)
  return static_cast< ::AutoIndexRollingPolicy >(rolling_policy_);
}
inline void IndexInfo::set_rolling_policy(::AutoIndexRollingPolicy value) {
  
  rolling_policy_ = value;
  // @@protoc_insertion_point(field_set:IndexInfo.rolling_policy)
}

// int32 index_id = 16;
inline void IndexInfo::clear_index_id() {
  index_id_ = 0;
}
inline ::google::protobuf::int32 IndexInfo::index_id() const {
  // @@protoc_insertion_point(field_get:IndexInfo.index_id)
  return index_id_;
}
inline void IndexInfo::set_index_id(::google::protobuf::int32 value) {
  
  index_id_ = value;
  // @@protoc_insertion_point(field_set:IndexInfo.index_id)
}

// -------------------------------------------------------------------

// UpdateIndexRequest

// int32 index_id = 1;
inline void UpdateIndexRequest::clear_index_id() {
  index_id_ = 0;
}
inline ::google::protobuf::int32 UpdateIndexRequest::index_id() const {
  // @@protoc_insertion_point(field_get:UpdateIndexRequest.index_id)
  return index_id_;
}
inline void UpdateIndexRequest::set_index_id(::google::protobuf::int32 value) {
  
  index_id_ = value;
  // @@protoc_insertion_point(field_set:UpdateIndexRequest.index_id)
}

// .google.protobuf.StringValue mapping = 4;
inline bool UpdateIndexRequest::has_mapping() const {
  return this != internal_default_instance() && mapping_ != NULL;
}
inline void UpdateIndexRequest::clear_mapping() {
  if (GetArenaNoVirtual() == NULL && mapping_ != NULL) delete mapping_;
  mapping_ = NULL;
}
inline const ::google::protobuf::StringValue& UpdateIndexRequest::mapping() const {
  const ::google::protobuf::StringValue* p = mapping_;
  // @@protoc_insertion_point(field_get:UpdateIndexRequest.mapping)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* UpdateIndexRequest::mutable_mapping() {
  
  if (mapping_ == NULL) {
    mapping_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:UpdateIndexRequest.mapping)
  return mapping_;
}
inline ::google::protobuf::StringValue* UpdateIndexRequest::release_mapping() {
  // @@protoc_insertion_point(field_release:UpdateIndexRequest.mapping)
  
  ::google::protobuf::StringValue* temp = mapping_;
  mapping_ = NULL;
  return temp;
}
inline void UpdateIndexRequest::set_allocated_mapping(::google::protobuf::StringValue* mapping) {
  delete mapping_;
  if (mapping != NULL && mapping->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_mapping = new ::google::protobuf::StringValue;
    new_mapping->CopyFrom(*mapping);
    mapping = new_mapping;
  }
  mapping_ = mapping;
  if (mapping) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:UpdateIndexRequest.mapping)
}

// .google.protobuf.StringValue setting = 5;
inline bool UpdateIndexRequest::has_setting() const {
  return this != internal_default_instance() && setting_ != NULL;
}
inline void UpdateIndexRequest::clear_setting() {
  if (GetArenaNoVirtual() == NULL && setting_ != NULL) delete setting_;
  setting_ = NULL;
}
inline const ::google::protobuf::StringValue& UpdateIndexRequest::setting() const {
  const ::google::protobuf::StringValue* p = setting_;
  // @@protoc_insertion_point(field_get:UpdateIndexRequest.setting)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* UpdateIndexRequest::mutable_setting() {
  
  if (setting_ == NULL) {
    setting_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:UpdateIndexRequest.setting)
  return setting_;
}
inline ::google::protobuf::StringValue* UpdateIndexRequest::release_setting() {
  // @@protoc_insertion_point(field_release:UpdateIndexRequest.setting)
  
  ::google::protobuf::StringValue* temp = setting_;
  setting_ = NULL;
  return temp;
}
inline void UpdateIndexRequest::set_allocated_setting(::google::protobuf::StringValue* setting) {
  delete setting_;
  if (setting != NULL && setting->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_setting = new ::google::protobuf::StringValue;
    new_setting->CopyFrom(*setting);
    setting = new_setting;
  }
  setting_ = setting;
  if (setting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:UpdateIndexRequest.setting)
}

// -------------------------------------------------------------------

// UpdateIndexReply

// int32 code = 1;
inline void UpdateIndexReply::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 UpdateIndexReply::code() const {
  // @@protoc_insertion_point(field_get:UpdateIndexReply.code)
  return code_;
}
inline void UpdateIndexReply::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:UpdateIndexReply.code)
}

// string message = 2;
inline void UpdateIndexReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateIndexReply::message() const {
  // @@protoc_insertion_point(field_get:UpdateIndexReply.message)
  return message_.GetNoArena();
}
inline void UpdateIndexReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UpdateIndexReply.message)
}
#if LANG_CXX11
inline void UpdateIndexReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UpdateIndexReply.message)
}
#endif
inline void UpdateIndexReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UpdateIndexReply.message)
}
inline void UpdateIndexReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UpdateIndexReply.message)
}
inline ::std::string* UpdateIndexReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:UpdateIndexReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateIndexReply::release_message() {
  // @@protoc_insertion_point(field_release:UpdateIndexReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateIndexReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:UpdateIndexReply.message)
}

// -------------------------------------------------------------------

// DeleteIndexRequest

// int32 index_id = 1;
inline void DeleteIndexRequest::clear_index_id() {
  index_id_ = 0;
}
inline ::google::protobuf::int32 DeleteIndexRequest::index_id() const {
  // @@protoc_insertion_point(field_get:DeleteIndexRequest.index_id)
  return index_id_;
}
inline void DeleteIndexRequest::set_index_id(::google::protobuf::int32 value) {
  
  index_id_ = value;
  // @@protoc_insertion_point(field_set:DeleteIndexRequest.index_id)
}

// -------------------------------------------------------------------

// DeleteIndexReply

// int32 code = 1;
inline void DeleteIndexReply::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 DeleteIndexReply::code() const {
  // @@protoc_insertion_point(field_get:DeleteIndexReply.code)
  return code_;
}
inline void DeleteIndexReply::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:DeleteIndexReply.code)
}

// string message = 2;
inline void DeleteIndexReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteIndexReply::message() const {
  // @@protoc_insertion_point(field_get:DeleteIndexReply.message)
  return message_.GetNoArena();
}
inline void DeleteIndexReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeleteIndexReply.message)
}
#if LANG_CXX11
inline void DeleteIndexReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeleteIndexReply.message)
}
#endif
inline void DeleteIndexReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeleteIndexReply.message)
}
inline void DeleteIndexReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeleteIndexReply.message)
}
inline ::std::string* DeleteIndexReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:DeleteIndexReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteIndexReply::release_message() {
  // @@protoc_insertion_point(field_release:DeleteIndexReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteIndexReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:DeleteIndexReply.message)
}

// -------------------------------------------------------------------

// ListIndexRequest

// int32 cluster_id = 1;
inline void ListIndexRequest::clear_cluster_id() {
  cluster_id_ = 0;
}
inline ::google::protobuf::int32 ListIndexRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:ListIndexRequest.cluster_id)
  return cluster_id_;
}
inline void ListIndexRequest::set_cluster_id(::google::protobuf::int32 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:ListIndexRequest.cluster_id)
}

// int32 project_id = 2;
inline void ListIndexRequest::clear_project_id() {
  project_id_ = 0;
}
inline ::google::protobuf::int32 ListIndexRequest::project_id() const {
  // @@protoc_insertion_point(field_get:ListIndexRequest.project_id)
  return project_id_;
}
inline void ListIndexRequest::set_project_id(::google::protobuf::int32 value) {
  
  project_id_ = value;
  // @@protoc_insertion_point(field_set:ListIndexRequest.project_id)
}

// string name = 3;
inline void ListIndexRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListIndexRequest::name() const {
  // @@protoc_insertion_point(field_get:ListIndexRequest.name)
  return name_.GetNoArena();
}
inline void ListIndexRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ListIndexRequest.name)
}
#if LANG_CXX11
inline void ListIndexRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ListIndexRequest.name)
}
#endif
inline void ListIndexRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ListIndexRequest.name)
}
inline void ListIndexRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ListIndexRequest.name)
}
inline ::std::string* ListIndexRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ListIndexRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListIndexRequest::release_name() {
  // @@protoc_insertion_point(field_release:ListIndexRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListIndexRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ListIndexRequest.name)
}

// -------------------------------------------------------------------

// ListIndexReply

// int32 code = 1;
inline void ListIndexReply::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 ListIndexReply::code() const {
  // @@protoc_insertion_point(field_get:ListIndexReply.code)
  return code_;
}
inline void ListIndexReply::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:ListIndexReply.code)
}

// string message = 2;
inline void ListIndexReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListIndexReply::message() const {
  // @@protoc_insertion_point(field_get:ListIndexReply.message)
  return message_.GetNoArena();
}
inline void ListIndexReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ListIndexReply.message)
}
#if LANG_CXX11
inline void ListIndexReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ListIndexReply.message)
}
#endif
inline void ListIndexReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ListIndexReply.message)
}
inline void ListIndexReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ListIndexReply.message)
}
inline ::std::string* ListIndexReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ListIndexReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListIndexReply::release_message() {
  // @@protoc_insertion_point(field_release:ListIndexReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListIndexReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ListIndexReply.message)
}

// repeated .IndexInfo indices = 3;
inline int ListIndexReply::indices_size() const {
  return indices_.size();
}
inline void ListIndexReply::clear_indices() {
  indices_.Clear();
}
inline const ::IndexInfo& ListIndexReply::indices(int index) const {
  // @@protoc_insertion_point(field_get:ListIndexReply.indices)
  return indices_.Get(index);
}
inline ::IndexInfo* ListIndexReply::mutable_indices(int index) {
  // @@protoc_insertion_point(field_mutable:ListIndexReply.indices)
  return indices_.Mutable(index);
}
inline ::IndexInfo* ListIndexReply::add_indices() {
  // @@protoc_insertion_point(field_add:ListIndexReply.indices)
  return indices_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::IndexInfo >*
ListIndexReply::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:ListIndexReply.indices)
  return &indices_;
}
inline const ::google::protobuf::RepeatedPtrField< ::IndexInfo >&
ListIndexReply::indices() const {
  // @@protoc_insertion_point(field_list:ListIndexReply.indices)
  return indices_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ClusterType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClusterType>() {
  return ::ClusterType_descriptor();
}
template <> struct is_proto_enum< ::ClusterStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClusterStatus>() {
  return ::ClusterStatus_descriptor();
}
template <> struct is_proto_enum< ::ProjectStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProjectStatus>() {
  return ::ProjectStatus_descriptor();
}
template <> struct is_proto_enum< ::AutoIndexRollingPolicy> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AutoIndexRollingPolicy>() {
  return ::AutoIndexRollingPolicy_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_admin_2fmeta_2eproto__INCLUDED
