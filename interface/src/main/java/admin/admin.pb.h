// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: admin/admin.proto

#ifndef PROTOBUF_admin_2fadmin_2eproto__INCLUDED
#define PROTOBUF_admin_2fadmin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class GetServiceModeRequest;
class GetServiceModeRequestDefaultTypeInternal;
extern GetServiceModeRequestDefaultTypeInternal _GetServiceModeRequest_default_instance_;
class GetWorkThreadStatusRequest;
class GetWorkThreadStatusRequestDefaultTypeInternal;
extern GetWorkThreadStatusRequestDefaultTypeInternal _GetWorkThreadStatusRequest_default_instance_;
class GetWorkThreadStatusResponse;
class GetWorkThreadStatusResponseDefaultTypeInternal;
extern GetWorkThreadStatusResponseDefaultTypeInternal _GetWorkThreadStatusResponse_default_instance_;
class InServiceResponse;
class InServiceResponseDefaultTypeInternal;
extern InServiceResponseDefaultTypeInternal _InServiceResponse_default_instance_;
class PingReply;
class PingReplyDefaultTypeInternal;
extern PingReplyDefaultTypeInternal _PingReply_default_instance_;
class PingRequest;
class PingRequestDefaultTypeInternal;
extern PingRequestDefaultTypeInternal _PingRequest_default_instance_;
class ReadOnlyResponse;
class ReadOnlyResponseDefaultTypeInternal;
extern ReadOnlyResponseDefaultTypeInternal _ReadOnlyResponse_default_instance_;
class ResumeWorkThreadRequest;
class ResumeWorkThreadRequestDefaultTypeInternal;
extern ResumeWorkThreadRequestDefaultTypeInternal _ResumeWorkThreadRequest_default_instance_;
class ResumeWorkThreadResponse;
class ResumeWorkThreadResponseDefaultTypeInternal;
extern ResumeWorkThreadResponseDefaultTypeInternal _ResumeWorkThreadResponse_default_instance_;
class ServiceModeResponse;
class ServiceModeResponseDefaultTypeInternal;
extern ServiceModeResponseDefaultTypeInternal _ServiceModeResponse_default_instance_;
class SetInServiceRequest;
class SetInServiceRequestDefaultTypeInternal;
extern SetInServiceRequestDefaultTypeInternal _SetInServiceRequest_default_instance_;
class SetReadOnlyRequest;
class SetReadOnlyRequestDefaultTypeInternal;
extern SetReadOnlyRequestDefaultTypeInternal _SetReadOnlyRequest_default_instance_;
class SetSuspendRequest;
class SetSuspendRequestDefaultTypeInternal;
extern SetSuspendRequestDefaultTypeInternal _SetSuspendRequest_default_instance_;
class SuspendResponse;
class SuspendResponseDefaultTypeInternal;
extern SuspendResponseDefaultTypeInternal _SuspendResponse_default_instance_;
class SuspendWorkThreadRequest;
class SuspendWorkThreadRequestDefaultTypeInternal;
extern SuspendWorkThreadRequestDefaultTypeInternal _SuspendWorkThreadRequest_default_instance_;
class SuspendWorkThreadResponse;
class SuspendWorkThreadResponseDefaultTypeInternal;
extern SuspendWorkThreadResponseDefaultTypeInternal _SuspendWorkThreadResponse_default_instance_;

namespace protobuf_admin_2fadmin_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_admin_2fadmin_2eproto

// ===================================================================

class PingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PingRequest) */ {
 public:
  PingRequest();
  virtual ~PingRequest();

  PingRequest(const PingRequest& from);

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PingRequest(PingRequest&& from) noexcept
    : PingRequest() {
    *this = ::std::move(from);
  }

  inline PingRequest& operator=(PingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PingRequest& default_instance();

  static inline const PingRequest* internal_default_instance() {
    return reinterpret_cast<const PingRequest*>(
               &_PingRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PingRequest* other);
  friend void swap(PingRequest& a, PingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PingRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PingRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PingRequest& from);
  void MergeFrom(const PingRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ping = 1;
  void clear_ping();
  static const int kPingFieldNumber = 1;
  const ::std::string& ping() const;
  void set_ping(const ::std::string& value);
  #if LANG_CXX11
  void set_ping(::std::string&& value);
  #endif
  void set_ping(const char* value);
  void set_ping(const char* value, size_t size);
  ::std::string* mutable_ping();
  ::std::string* release_ping();
  void set_allocated_ping(::std::string* ping);

  // @@protoc_insertion_point(class_scope:PingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ping_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PingReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PingReply) */ {
 public:
  PingReply();
  virtual ~PingReply();

  PingReply(const PingReply& from);

  inline PingReply& operator=(const PingReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PingReply(PingReply&& from) noexcept
    : PingReply() {
    *this = ::std::move(from);
  }

  inline PingReply& operator=(PingReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PingReply& default_instance();

  static inline const PingReply* internal_default_instance() {
    return reinterpret_cast<const PingReply*>(
               &_PingReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PingReply* other);
  friend void swap(PingReply& a, PingReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PingReply* New() const PROTOBUF_FINAL { return New(NULL); }

  PingReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PingReply& from);
  void MergeFrom(const PingReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PingReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string pong = 1;
  void clear_pong();
  static const int kPongFieldNumber = 1;
  const ::std::string& pong() const;
  void set_pong(const ::std::string& value);
  #if LANG_CXX11
  void set_pong(::std::string&& value);
  #endif
  void set_pong(const char* value);
  void set_pong(const char* value, size_t size);
  ::std::string* mutable_pong();
  ::std::string* release_pong();
  void set_allocated_pong(::std::string* pong);

  // @@protoc_insertion_point(class_scope:PingReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pong_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetReadOnlyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SetReadOnlyRequest) */ {
 public:
  SetReadOnlyRequest();
  virtual ~SetReadOnlyRequest();

  SetReadOnlyRequest(const SetReadOnlyRequest& from);

  inline SetReadOnlyRequest& operator=(const SetReadOnlyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetReadOnlyRequest(SetReadOnlyRequest&& from) noexcept
    : SetReadOnlyRequest() {
    *this = ::std::move(from);
  }

  inline SetReadOnlyRequest& operator=(SetReadOnlyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetReadOnlyRequest& default_instance();

  static inline const SetReadOnlyRequest* internal_default_instance() {
    return reinterpret_cast<const SetReadOnlyRequest*>(
               &_SetReadOnlyRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SetReadOnlyRequest* other);
  friend void swap(SetReadOnlyRequest& a, SetReadOnlyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetReadOnlyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetReadOnlyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetReadOnlyRequest& from);
  void MergeFrom(const SetReadOnlyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetReadOnlyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SetReadOnlyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadOnlyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReadOnlyResponse) */ {
 public:
  ReadOnlyResponse();
  virtual ~ReadOnlyResponse();

  ReadOnlyResponse(const ReadOnlyResponse& from);

  inline ReadOnlyResponse& operator=(const ReadOnlyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadOnlyResponse(ReadOnlyResponse&& from) noexcept
    : ReadOnlyResponse() {
    *this = ::std::move(from);
  }

  inline ReadOnlyResponse& operator=(ReadOnlyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadOnlyResponse& default_instance();

  static inline const ReadOnlyResponse* internal_default_instance() {
    return reinterpret_cast<const ReadOnlyResponse*>(
               &_ReadOnlyResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ReadOnlyResponse* other);
  friend void swap(ReadOnlyResponse& a, ReadOnlyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadOnlyResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ReadOnlyResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReadOnlyResponse& from);
  void MergeFrom(const ReadOnlyResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReadOnlyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ReadOnlyResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetInServiceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SetInServiceRequest) */ {
 public:
  SetInServiceRequest();
  virtual ~SetInServiceRequest();

  SetInServiceRequest(const SetInServiceRequest& from);

  inline SetInServiceRequest& operator=(const SetInServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetInServiceRequest(SetInServiceRequest&& from) noexcept
    : SetInServiceRequest() {
    *this = ::std::move(from);
  }

  inline SetInServiceRequest& operator=(SetInServiceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetInServiceRequest& default_instance();

  static inline const SetInServiceRequest* internal_default_instance() {
    return reinterpret_cast<const SetInServiceRequest*>(
               &_SetInServiceRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SetInServiceRequest* other);
  friend void swap(SetInServiceRequest& a, SetInServiceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetInServiceRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetInServiceRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetInServiceRequest& from);
  void MergeFrom(const SetInServiceRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetInServiceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SetInServiceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InServiceResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:InServiceResponse) */ {
 public:
  InServiceResponse();
  virtual ~InServiceResponse();

  InServiceResponse(const InServiceResponse& from);

  inline InServiceResponse& operator=(const InServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InServiceResponse(InServiceResponse&& from) noexcept
    : InServiceResponse() {
    *this = ::std::move(from);
  }

  inline InServiceResponse& operator=(InServiceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InServiceResponse& default_instance();

  static inline const InServiceResponse* internal_default_instance() {
    return reinterpret_cast<const InServiceResponse*>(
               &_InServiceResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(InServiceResponse* other);
  friend void swap(InServiceResponse& a, InServiceResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InServiceResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  InServiceResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InServiceResponse& from);
  void MergeFrom(const InServiceResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InServiceResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:InServiceResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetSuspendRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SetSuspendRequest) */ {
 public:
  SetSuspendRequest();
  virtual ~SetSuspendRequest();

  SetSuspendRequest(const SetSuspendRequest& from);

  inline SetSuspendRequest& operator=(const SetSuspendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetSuspendRequest(SetSuspendRequest&& from) noexcept
    : SetSuspendRequest() {
    *this = ::std::move(from);
  }

  inline SetSuspendRequest& operator=(SetSuspendRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetSuspendRequest& default_instance();

  static inline const SetSuspendRequest* internal_default_instance() {
    return reinterpret_cast<const SetSuspendRequest*>(
               &_SetSuspendRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SetSuspendRequest* other);
  friend void swap(SetSuspendRequest& a, SetSuspendRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetSuspendRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetSuspendRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetSuspendRequest& from);
  void MergeFrom(const SetSuspendRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetSuspendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SetSuspendRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SuspendResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SuspendResponse) */ {
 public:
  SuspendResponse();
  virtual ~SuspendResponse();

  SuspendResponse(const SuspendResponse& from);

  inline SuspendResponse& operator=(const SuspendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SuspendResponse(SuspendResponse&& from) noexcept
    : SuspendResponse() {
    *this = ::std::move(from);
  }

  inline SuspendResponse& operator=(SuspendResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SuspendResponse& default_instance();

  static inline const SuspendResponse* internal_default_instance() {
    return reinterpret_cast<const SuspendResponse*>(
               &_SuspendResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(SuspendResponse* other);
  friend void swap(SuspendResponse& a, SuspendResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SuspendResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SuspendResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SuspendResponse& from);
  void MergeFrom(const SuspendResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SuspendResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SuspendResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetServiceModeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetServiceModeRequest) */ {
 public:
  GetServiceModeRequest();
  virtual ~GetServiceModeRequest();

  GetServiceModeRequest(const GetServiceModeRequest& from);

  inline GetServiceModeRequest& operator=(const GetServiceModeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetServiceModeRequest(GetServiceModeRequest&& from) noexcept
    : GetServiceModeRequest() {
    *this = ::std::move(from);
  }

  inline GetServiceModeRequest& operator=(GetServiceModeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServiceModeRequest& default_instance();

  static inline const GetServiceModeRequest* internal_default_instance() {
    return reinterpret_cast<const GetServiceModeRequest*>(
               &_GetServiceModeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(GetServiceModeRequest* other);
  friend void swap(GetServiceModeRequest& a, GetServiceModeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetServiceModeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetServiceModeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetServiceModeRequest& from);
  void MergeFrom(const GetServiceModeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetServiceModeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GetServiceModeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceModeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServiceModeResponse) */ {
 public:
  ServiceModeResponse();
  virtual ~ServiceModeResponse();

  ServiceModeResponse(const ServiceModeResponse& from);

  inline ServiceModeResponse& operator=(const ServiceModeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceModeResponse(ServiceModeResponse&& from) noexcept
    : ServiceModeResponse() {
    *this = ::std::move(from);
  }

  inline ServiceModeResponse& operator=(ServiceModeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceModeResponse& default_instance();

  static inline const ServiceModeResponse* internal_default_instance() {
    return reinterpret_cast<const ServiceModeResponse*>(
               &_ServiceModeResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(ServiceModeResponse* other);
  friend void swap(ServiceModeResponse& a, ServiceModeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceModeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceModeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServiceModeResponse& from);
  void MergeFrom(const ServiceModeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServiceModeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string mode = 3;
  void clear_mode();
  static const int kModeFieldNumber = 3;
  const ::std::string& mode() const;
  void set_mode(const ::std::string& value);
  #if LANG_CXX11
  void set_mode(::std::string&& value);
  #endif
  void set_mode(const char* value);
  void set_mode(const char* value, size_t size);
  ::std::string* mutable_mode();
  ::std::string* release_mode();
  void set_allocated_mode(::std::string* mode);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServiceModeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr mode_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SuspendWorkThreadRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SuspendWorkThreadRequest) */ {
 public:
  SuspendWorkThreadRequest();
  virtual ~SuspendWorkThreadRequest();

  SuspendWorkThreadRequest(const SuspendWorkThreadRequest& from);

  inline SuspendWorkThreadRequest& operator=(const SuspendWorkThreadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SuspendWorkThreadRequest(SuspendWorkThreadRequest&& from) noexcept
    : SuspendWorkThreadRequest() {
    *this = ::std::move(from);
  }

  inline SuspendWorkThreadRequest& operator=(SuspendWorkThreadRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SuspendWorkThreadRequest& default_instance();

  static inline const SuspendWorkThreadRequest* internal_default_instance() {
    return reinterpret_cast<const SuspendWorkThreadRequest*>(
               &_SuspendWorkThreadRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(SuspendWorkThreadRequest* other);
  friend void swap(SuspendWorkThreadRequest& a, SuspendWorkThreadRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SuspendWorkThreadRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SuspendWorkThreadRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SuspendWorkThreadRequest& from);
  void MergeFrom(const SuspendWorkThreadRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SuspendWorkThreadRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SuspendWorkThreadRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SuspendWorkThreadResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SuspendWorkThreadResponse) */ {
 public:
  SuspendWorkThreadResponse();
  virtual ~SuspendWorkThreadResponse();

  SuspendWorkThreadResponse(const SuspendWorkThreadResponse& from);

  inline SuspendWorkThreadResponse& operator=(const SuspendWorkThreadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SuspendWorkThreadResponse(SuspendWorkThreadResponse&& from) noexcept
    : SuspendWorkThreadResponse() {
    *this = ::std::move(from);
  }

  inline SuspendWorkThreadResponse& operator=(SuspendWorkThreadResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SuspendWorkThreadResponse& default_instance();

  static inline const SuspendWorkThreadResponse* internal_default_instance() {
    return reinterpret_cast<const SuspendWorkThreadResponse*>(
               &_SuspendWorkThreadResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(SuspendWorkThreadResponse* other);
  friend void swap(SuspendWorkThreadResponse& a, SuspendWorkThreadResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SuspendWorkThreadResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SuspendWorkThreadResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SuspendWorkThreadResponse& from);
  void MergeFrom(const SuspendWorkThreadResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SuspendWorkThreadResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SuspendWorkThreadResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResumeWorkThreadRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ResumeWorkThreadRequest) */ {
 public:
  ResumeWorkThreadRequest();
  virtual ~ResumeWorkThreadRequest();

  ResumeWorkThreadRequest(const ResumeWorkThreadRequest& from);

  inline ResumeWorkThreadRequest& operator=(const ResumeWorkThreadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResumeWorkThreadRequest(ResumeWorkThreadRequest&& from) noexcept
    : ResumeWorkThreadRequest() {
    *this = ::std::move(from);
  }

  inline ResumeWorkThreadRequest& operator=(ResumeWorkThreadRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResumeWorkThreadRequest& default_instance();

  static inline const ResumeWorkThreadRequest* internal_default_instance() {
    return reinterpret_cast<const ResumeWorkThreadRequest*>(
               &_ResumeWorkThreadRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(ResumeWorkThreadRequest* other);
  friend void swap(ResumeWorkThreadRequest& a, ResumeWorkThreadRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResumeWorkThreadRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ResumeWorkThreadRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResumeWorkThreadRequest& from);
  void MergeFrom(const ResumeWorkThreadRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResumeWorkThreadRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ResumeWorkThreadRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResumeWorkThreadResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ResumeWorkThreadResponse) */ {
 public:
  ResumeWorkThreadResponse();
  virtual ~ResumeWorkThreadResponse();

  ResumeWorkThreadResponse(const ResumeWorkThreadResponse& from);

  inline ResumeWorkThreadResponse& operator=(const ResumeWorkThreadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResumeWorkThreadResponse(ResumeWorkThreadResponse&& from) noexcept
    : ResumeWorkThreadResponse() {
    *this = ::std::move(from);
  }

  inline ResumeWorkThreadResponse& operator=(ResumeWorkThreadResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResumeWorkThreadResponse& default_instance();

  static inline const ResumeWorkThreadResponse* internal_default_instance() {
    return reinterpret_cast<const ResumeWorkThreadResponse*>(
               &_ResumeWorkThreadResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(ResumeWorkThreadResponse* other);
  friend void swap(ResumeWorkThreadResponse& a, ResumeWorkThreadResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResumeWorkThreadResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ResumeWorkThreadResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResumeWorkThreadResponse& from);
  void MergeFrom(const ResumeWorkThreadResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResumeWorkThreadResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ResumeWorkThreadResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetWorkThreadStatusRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetWorkThreadStatusRequest) */ {
 public:
  GetWorkThreadStatusRequest();
  virtual ~GetWorkThreadStatusRequest();

  GetWorkThreadStatusRequest(const GetWorkThreadStatusRequest& from);

  inline GetWorkThreadStatusRequest& operator=(const GetWorkThreadStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetWorkThreadStatusRequest(GetWorkThreadStatusRequest&& from) noexcept
    : GetWorkThreadStatusRequest() {
    *this = ::std::move(from);
  }

  inline GetWorkThreadStatusRequest& operator=(GetWorkThreadStatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetWorkThreadStatusRequest& default_instance();

  static inline const GetWorkThreadStatusRequest* internal_default_instance() {
    return reinterpret_cast<const GetWorkThreadStatusRequest*>(
               &_GetWorkThreadStatusRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(GetWorkThreadStatusRequest* other);
  friend void swap(GetWorkThreadStatusRequest& a, GetWorkThreadStatusRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetWorkThreadStatusRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetWorkThreadStatusRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetWorkThreadStatusRequest& from);
  void MergeFrom(const GetWorkThreadStatusRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetWorkThreadStatusRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GetWorkThreadStatusRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetWorkThreadStatusResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetWorkThreadStatusResponse) */ {
 public:
  GetWorkThreadStatusResponse();
  virtual ~GetWorkThreadStatusResponse();

  GetWorkThreadStatusResponse(const GetWorkThreadStatusResponse& from);

  inline GetWorkThreadStatusResponse& operator=(const GetWorkThreadStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetWorkThreadStatusResponse(GetWorkThreadStatusResponse&& from) noexcept
    : GetWorkThreadStatusResponse() {
    *this = ::std::move(from);
  }

  inline GetWorkThreadStatusResponse& operator=(GetWorkThreadStatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetWorkThreadStatusResponse& default_instance();

  static inline const GetWorkThreadStatusResponse* internal_default_instance() {
    return reinterpret_cast<const GetWorkThreadStatusResponse*>(
               &_GetWorkThreadStatusResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(GetWorkThreadStatusResponse* other);
  friend void swap(GetWorkThreadStatusResponse& a, GetWorkThreadStatusResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetWorkThreadStatusResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetWorkThreadStatusResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetWorkThreadStatusResponse& from);
  void MergeFrom(const GetWorkThreadStatusResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetWorkThreadStatusResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // bool running = 3;
  void clear_running();
  static const int kRunningFieldNumber = 3;
  bool running() const;
  void set_running(bool value);

  // @@protoc_insertion_point(class_scope:GetWorkThreadStatusResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  bool running_;
  mutable int _cached_size_;
  friend struct protobuf_admin_2fadmin_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PingRequest

// string ping = 1;
inline void PingRequest::clear_ping() {
  ping_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PingRequest::ping() const {
  // @@protoc_insertion_point(field_get:PingRequest.ping)
  return ping_.GetNoArena();
}
inline void PingRequest::set_ping(const ::std::string& value) {
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PingRequest.ping)
}
#if LANG_CXX11
inline void PingRequest::set_ping(::std::string&& value) {
  
  ping_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PingRequest.ping)
}
#endif
inline void PingRequest::set_ping(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PingRequest.ping)
}
inline void PingRequest::set_ping(const char* value, size_t size) {
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PingRequest.ping)
}
inline ::std::string* PingRequest::mutable_ping() {
  
  // @@protoc_insertion_point(field_mutable:PingRequest.ping)
  return ping_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PingRequest::release_ping() {
  // @@protoc_insertion_point(field_release:PingRequest.ping)
  
  return ping_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PingRequest::set_allocated_ping(::std::string* ping) {
  if (ping != NULL) {
    
  } else {
    
  }
  ping_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ping);
  // @@protoc_insertion_point(field_set_allocated:PingRequest.ping)
}

// -------------------------------------------------------------------

// PingReply

// string pong = 1;
inline void PingReply::clear_pong() {
  pong_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PingReply::pong() const {
  // @@protoc_insertion_point(field_get:PingReply.pong)
  return pong_.GetNoArena();
}
inline void PingReply::set_pong(const ::std::string& value) {
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PingReply.pong)
}
#if LANG_CXX11
inline void PingReply::set_pong(::std::string&& value) {
  
  pong_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PingReply.pong)
}
#endif
inline void PingReply::set_pong(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PingReply.pong)
}
inline void PingReply::set_pong(const char* value, size_t size) {
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PingReply.pong)
}
inline ::std::string* PingReply::mutable_pong() {
  
  // @@protoc_insertion_point(field_mutable:PingReply.pong)
  return pong_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PingReply::release_pong() {
  // @@protoc_insertion_point(field_release:PingReply.pong)
  
  return pong_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PingReply::set_allocated_pong(::std::string* pong) {
  if (pong != NULL) {
    
  } else {
    
  }
  pong_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pong);
  // @@protoc_insertion_point(field_set_allocated:PingReply.pong)
}

// -------------------------------------------------------------------

// SetReadOnlyRequest

// -------------------------------------------------------------------

// ReadOnlyResponse

// int32 code = 1;
inline void ReadOnlyResponse::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 ReadOnlyResponse::code() const {
  // @@protoc_insertion_point(field_get:ReadOnlyResponse.code)
  return code_;
}
inline void ReadOnlyResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:ReadOnlyResponse.code)
}

// string message = 2;
inline void ReadOnlyResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadOnlyResponse::message() const {
  // @@protoc_insertion_point(field_get:ReadOnlyResponse.message)
  return message_.GetNoArena();
}
inline void ReadOnlyResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReadOnlyResponse.message)
}
#if LANG_CXX11
inline void ReadOnlyResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReadOnlyResponse.message)
}
#endif
inline void ReadOnlyResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReadOnlyResponse.message)
}
inline void ReadOnlyResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReadOnlyResponse.message)
}
inline ::std::string* ReadOnlyResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ReadOnlyResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadOnlyResponse::release_message() {
  // @@protoc_insertion_point(field_release:ReadOnlyResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadOnlyResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ReadOnlyResponse.message)
}

// -------------------------------------------------------------------

// SetInServiceRequest

// -------------------------------------------------------------------

// InServiceResponse

// int32 code = 1;
inline void InServiceResponse::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 InServiceResponse::code() const {
  // @@protoc_insertion_point(field_get:InServiceResponse.code)
  return code_;
}
inline void InServiceResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:InServiceResponse.code)
}

// string message = 2;
inline void InServiceResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InServiceResponse::message() const {
  // @@protoc_insertion_point(field_get:InServiceResponse.message)
  return message_.GetNoArena();
}
inline void InServiceResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InServiceResponse.message)
}
#if LANG_CXX11
inline void InServiceResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:InServiceResponse.message)
}
#endif
inline void InServiceResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InServiceResponse.message)
}
inline void InServiceResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InServiceResponse.message)
}
inline ::std::string* InServiceResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:InServiceResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InServiceResponse::release_message() {
  // @@protoc_insertion_point(field_release:InServiceResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InServiceResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:InServiceResponse.message)
}

// -------------------------------------------------------------------

// SetSuspendRequest

// -------------------------------------------------------------------

// SuspendResponse

// int32 code = 1;
inline void SuspendResponse::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 SuspendResponse::code() const {
  // @@protoc_insertion_point(field_get:SuspendResponse.code)
  return code_;
}
inline void SuspendResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:SuspendResponse.code)
}

// string message = 2;
inline void SuspendResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SuspendResponse::message() const {
  // @@protoc_insertion_point(field_get:SuspendResponse.message)
  return message_.GetNoArena();
}
inline void SuspendResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SuspendResponse.message)
}
#if LANG_CXX11
inline void SuspendResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SuspendResponse.message)
}
#endif
inline void SuspendResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SuspendResponse.message)
}
inline void SuspendResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SuspendResponse.message)
}
inline ::std::string* SuspendResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:SuspendResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuspendResponse::release_message() {
  // @@protoc_insertion_point(field_release:SuspendResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuspendResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:SuspendResponse.message)
}

// -------------------------------------------------------------------

// GetServiceModeRequest

// -------------------------------------------------------------------

// ServiceModeResponse

// int32 code = 1;
inline void ServiceModeResponse::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 ServiceModeResponse::code() const {
  // @@protoc_insertion_point(field_get:ServiceModeResponse.code)
  return code_;
}
inline void ServiceModeResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:ServiceModeResponse.code)
}

// string message = 2;
inline void ServiceModeResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceModeResponse::message() const {
  // @@protoc_insertion_point(field_get:ServiceModeResponse.message)
  return message_.GetNoArena();
}
inline void ServiceModeResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServiceModeResponse.message)
}
#if LANG_CXX11
inline void ServiceModeResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceModeResponse.message)
}
#endif
inline void ServiceModeResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceModeResponse.message)
}
inline void ServiceModeResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceModeResponse.message)
}
inline ::std::string* ServiceModeResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ServiceModeResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceModeResponse::release_message() {
  // @@protoc_insertion_point(field_release:ServiceModeResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceModeResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ServiceModeResponse.message)
}

// string mode = 3;
inline void ServiceModeResponse::clear_mode() {
  mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceModeResponse::mode() const {
  // @@protoc_insertion_point(field_get:ServiceModeResponse.mode)
  return mode_.GetNoArena();
}
inline void ServiceModeResponse::set_mode(const ::std::string& value) {
  
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServiceModeResponse.mode)
}
#if LANG_CXX11
inline void ServiceModeResponse::set_mode(::std::string&& value) {
  
  mode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceModeResponse.mode)
}
#endif
inline void ServiceModeResponse::set_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceModeResponse.mode)
}
inline void ServiceModeResponse::set_mode(const char* value, size_t size) {
  
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceModeResponse.mode)
}
inline ::std::string* ServiceModeResponse::mutable_mode() {
  
  // @@protoc_insertion_point(field_mutable:ServiceModeResponse.mode)
  return mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceModeResponse::release_mode() {
  // @@protoc_insertion_point(field_release:ServiceModeResponse.mode)
  
  return mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceModeResponse::set_allocated_mode(::std::string* mode) {
  if (mode != NULL) {
    
  } else {
    
  }
  mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mode);
  // @@protoc_insertion_point(field_set_allocated:ServiceModeResponse.mode)
}

// -------------------------------------------------------------------

// SuspendWorkThreadRequest

// -------------------------------------------------------------------

// SuspendWorkThreadResponse

// int32 code = 1;
inline void SuspendWorkThreadResponse::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 SuspendWorkThreadResponse::code() const {
  // @@protoc_insertion_point(field_get:SuspendWorkThreadResponse.code)
  return code_;
}
inline void SuspendWorkThreadResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:SuspendWorkThreadResponse.code)
}

// string message = 2;
inline void SuspendWorkThreadResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SuspendWorkThreadResponse::message() const {
  // @@protoc_insertion_point(field_get:SuspendWorkThreadResponse.message)
  return message_.GetNoArena();
}
inline void SuspendWorkThreadResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SuspendWorkThreadResponse.message)
}
#if LANG_CXX11
inline void SuspendWorkThreadResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SuspendWorkThreadResponse.message)
}
#endif
inline void SuspendWorkThreadResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SuspendWorkThreadResponse.message)
}
inline void SuspendWorkThreadResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SuspendWorkThreadResponse.message)
}
inline ::std::string* SuspendWorkThreadResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:SuspendWorkThreadResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuspendWorkThreadResponse::release_message() {
  // @@protoc_insertion_point(field_release:SuspendWorkThreadResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuspendWorkThreadResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:SuspendWorkThreadResponse.message)
}

// -------------------------------------------------------------------

// ResumeWorkThreadRequest

// -------------------------------------------------------------------

// ResumeWorkThreadResponse

// int32 code = 1;
inline void ResumeWorkThreadResponse::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 ResumeWorkThreadResponse::code() const {
  // @@protoc_insertion_point(field_get:ResumeWorkThreadResponse.code)
  return code_;
}
inline void ResumeWorkThreadResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:ResumeWorkThreadResponse.code)
}

// string message = 2;
inline void ResumeWorkThreadResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResumeWorkThreadResponse::message() const {
  // @@protoc_insertion_point(field_get:ResumeWorkThreadResponse.message)
  return message_.GetNoArena();
}
inline void ResumeWorkThreadResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ResumeWorkThreadResponse.message)
}
#if LANG_CXX11
inline void ResumeWorkThreadResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ResumeWorkThreadResponse.message)
}
#endif
inline void ResumeWorkThreadResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ResumeWorkThreadResponse.message)
}
inline void ResumeWorkThreadResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ResumeWorkThreadResponse.message)
}
inline ::std::string* ResumeWorkThreadResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ResumeWorkThreadResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResumeWorkThreadResponse::release_message() {
  // @@protoc_insertion_point(field_release:ResumeWorkThreadResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResumeWorkThreadResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ResumeWorkThreadResponse.message)
}

// -------------------------------------------------------------------

// GetWorkThreadStatusRequest

// -------------------------------------------------------------------

// GetWorkThreadStatusResponse

// int32 code = 1;
inline void GetWorkThreadStatusResponse::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 GetWorkThreadStatusResponse::code() const {
  // @@protoc_insertion_point(field_get:GetWorkThreadStatusResponse.code)
  return code_;
}
inline void GetWorkThreadStatusResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:GetWorkThreadStatusResponse.code)
}

// string message = 2;
inline void GetWorkThreadStatusResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetWorkThreadStatusResponse::message() const {
  // @@protoc_insertion_point(field_get:GetWorkThreadStatusResponse.message)
  return message_.GetNoArena();
}
inline void GetWorkThreadStatusResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetWorkThreadStatusResponse.message)
}
#if LANG_CXX11
inline void GetWorkThreadStatusResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetWorkThreadStatusResponse.message)
}
#endif
inline void GetWorkThreadStatusResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetWorkThreadStatusResponse.message)
}
inline void GetWorkThreadStatusResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetWorkThreadStatusResponse.message)
}
inline ::std::string* GetWorkThreadStatusResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:GetWorkThreadStatusResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetWorkThreadStatusResponse::release_message() {
  // @@protoc_insertion_point(field_release:GetWorkThreadStatusResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetWorkThreadStatusResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:GetWorkThreadStatusResponse.message)
}

// bool running = 3;
inline void GetWorkThreadStatusResponse::clear_running() {
  running_ = false;
}
inline bool GetWorkThreadStatusResponse::running() const {
  // @@protoc_insertion_point(field_get:GetWorkThreadStatusResponse.running)
  return running_;
}
inline void GetWorkThreadStatusResponse::set_running(bool value) {
  
  running_ = value;
  // @@protoc_insertion_point(field_set:GetWorkThreadStatusResponse.running)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_admin_2fadmin_2eproto__INCLUDED
